Func input [ref: Global, size: -2, loc: 0] [type int] [line: -1]
Sibling: 0  Func output [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy* [ref: Param, size: 1, loc: -2] [type int] [line: -1]
Sibling: 1  Func inputb [ref: Global, size: -2, loc: 0] [type bool] [line: -1]
Sibling: 2  Func outputb [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy* [ref: Param, size: 1, loc: -2] [type bool] [line: -1]
Sibling: 3  Func inputc [ref: Global, size: -2, loc: 0] [type char] [line: -1]
Sibling: 4  Func outputc [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy* [ref: Param, size: 1, loc: -2] [type char] [line: -1]
Sibling: 5  Func outnl [ref: Global, size: -2, loc: 0] [type void] [line: -1]
Sibling: 6  Func main [ref: Global, size: -6, loc: 0] [type void] [line: 2]
!   Child: 1  Compound [ref: None, size: -6, loc: 0] [type void] [line: 2]
!   !   Child: 0  Var: c [ref: Local, size: 1, loc: -2] [type char] [line: 3]
!   !   Sibling: 0  Var: i [ref: Local, size: 1, loc: -3] [type int] [line: 4]
!   !   Sibling: 1  Var: k [ref: Local, size: 1, loc: -4] [type int] [line: 4]
!   !   Sibling: 2  Var: max [ref: Local, size: 1, loc: -5] [type int] [line: 5]
!   !   !   Child: 0  Const: 30 [type int] [line: 5]
!   !   Child: 1  Assign: = [type int] [line: 7]
!   !   !   Child: 0  Id: k [ref: Local, size: 1, loc: -4] [type int] [line: 7]
!   !   !   Child: 1  Const: 1 [type int] [line: 7]
!   !   Sibling: 0  While  [type void] [line: 8]
!   !   !   Child: 0  Op: < [type bool] [line: 8]
!   !   !   !   Child: 0  Id: k [ref: Local, size: 1, loc: -4] [type int] [line: 8]
!   !   !   !   Child: 1  Id: max [ref: Local, size: 1, loc: -5] [type int] [line: 8]
!   !   !   Child: 1  Compound [ref: None, size: -6, loc: 0] [type void] [line: 8]
!   !   !   !   Child: 1  Assign: = [type int] [line: 9]
!   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -3] [type int] [line: 9]
!   !   !   !   !   Child: 1  Const: 0 [type int] [line: 9]
!   !   !   !   Sibling: 0  While  [type void] [line: 10]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 10]
!   !   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -3] [type int] [line: 10]
!   !   !   !   !   !   Child: 1  Id: max [ref: Local, size: 1, loc: -5] [type int] [line: 10]
!   !   !   !   !   Child: 1  Compound [ref: None, size: -6, loc: 0] [type void] [line: 10]
!   !   !   !   !   !   Child: 1  If  [type void] [line: 11]
!   !   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 11]
!   !   !   !   !   !   !   !   Child: 0  Op: % [type int] [line: 11]
!   !   !   !   !   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -3] [type int] [line: 11]
!   !   !   !   !   !   !   !   !   Child: 1  Id: k [ref: Local, size: 1, loc: -4] [type int] [line: 11]
!   !   !   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 11]
!   !   !   !   !   !   !   Child: 1  Call: outputc [type void] [line: 11]
!   !   !   !   !   !   !   !   Child: 0  Const: 'X' [type char] [line: 11]
!   !   !   !   !   !   !   Child: 2  Call: outputc [type void] [line: 12]
!   !   !   !   !   !   !   !   Child: 0  Const: ' ' [type char] [line: 12]
!   !   !   !   !   !   Sibling: 0  Assign: ++ [type int] [line: 13]
!   !   !   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -3] [type int] [line: 13]
!   !   !   !   Sibling: 1  Call: outputc [type void] [line: 15]
!   !   !   !   !   Child: 0  Const: '
' [type char] [line: 15]
!   !   !   !   Sibling: 2  Assign: ++ [type int] [line: 16]
!   !   !   !   !   Child: 0  Id: k [ref: Local, size: 1, loc: -4] [type int] [line: 16]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0
