Func input [ref: Global, size: -2, loc: 0] [type int] [line: -1]
Sibling: 0  Func output [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy* [ref: Param, size: 1, loc: -2] [type int] [line: -1]
Sibling: 1  Func inputb [ref: Global, size: -2, loc: 0] [type bool] [line: -1]
Sibling: 2  Func outputb [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy* [ref: Param, size: 1, loc: -2] [type bool] [line: -1]
Sibling: 3  Func inputc [ref: Global, size: -2, loc: 0] [type char] [line: -1]
Sibling: 4  Func outputc [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy* [ref: Param, size: 1, loc: -2] [type char] [line: -1]
Sibling: 5  Func outnl [ref: Global, size: -2, loc: 0] [type void] [line: -1]
Sibling: 6  Var: board is array [ref: Global, size: 82, loc: -1] [type int] [line: 22]
Sibling: 7  Var: locked is array [ref: Global, size: 82, loc: -83] [type bool] [line: 23]
Sibling: 8  Func initBoard [ref: Global, size: -3, loc: 0] [type void] [line: 26]
!   Child: 1  Compound [ref: None, size: -3, loc: 0] [type void] [line: 27]
!   !   Child: 0  Var: i [ref: Local, size: 1, loc: -2] [type int] [line: 28]
!   !   Child: 1  Assign: = [type int] [line: 29]
!   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 29]
!   !   !   Child: 1  Const: 0 [type int] [line: 29]
!   !   Sibling: 0  While  [type void] [line: 30]
!   !   !   Child: 0  Op: < [type bool] [line: 30]
!   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 30]
!   !   !   !   Child: 1  Const: 81 [type int] [line: 30]
!   !   !   Child: 1  Compound [ref: None, size: -3, loc: 0] [type void] [line: 30]
!   !   !   !   Child: 1  Assign: = [type int] [line: 31]
!   !   !   !   !   Child: 0  Op: [ [type int] [line: 31]
!   !   !   !   !   !   Child: 0  Id: board is array [ref: Global, size: 82, loc: -1] [type int] [line: 31]
!   !   !   !   !   !   Child: 1  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 31]
!   !   !   !   !   Child: 1  Const: 0 [type int] [line: 31]
!   !   !   !   Sibling: 0  Assign: = [type bool] [line: 32]
!   !   !   !   !   Child: 0  Op: [ [type bool] [line: 32]
!   !   !   !   !   !   Child: 0  Id: locked is array [ref: Global, size: 82, loc: -83] [type bool] [line: 32]
!   !   !   !   !   !   Child: 1  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 32]
!   !   !   !   !   Child: 1  Const: false [type bool] [line: 32]
!   !   !   !   Sibling: 1  Assign: ++ [type int] [line: 33]
!   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 33]
Sibling: 9  Func setValue [ref: Global, size: -5, loc: 0] [type void] [line: 38]
!   Child: 0  Param row [ref: Param, size: 1, loc: -2] [type int] [line: 38]
!   Sibling: 0  Param col [ref: Param, size: 1, loc: -3] [type int] [line: 38]
!   Sibling: 1  Param value [ref: Param, size: 1, loc: -4] [type int] [line: 38]
!   Child: 1  Compound [ref: None, size: -5, loc: 0] [type void] [line: 39]
!   !   Child: 1  Assign: = [type int] [line: 40]
!   !   !   Child: 0  Op: [ [type int] [line: 40]
!   !   !   !   Child: 0  Id: board is array [ref: Global, size: 82, loc: -1] [type int] [line: 40]
!   !   !   !   Child: 1  Op: + [type int] [line: 40]
!   !   !   !   !   Child: 0  Op: * [type int] [line: 40]
!   !   !   !   !   !   Child: 0  Id: row [ref: Param, size: 1, loc: -2] [type int] [line: 40]
!   !   !   !   !   !   Child: 1  Const: 9 [type int] [line: 40]
!   !   !   !   !   Child: 1  Id: col [ref: Param, size: 1, loc: -3] [type int] [line: 40]
!   !   !   Child: 1  Id: value [ref: Param, size: 1, loc: -4] [type int] [line: 40]
Sibling: 10  Func getValue [ref: Global, size: -4, loc: 0] [type int] [line: 44]
!   Child: 0  Param row [ref: Param, size: 1, loc: -2] [type int] [line: 44]
!   Sibling: 0  Param col [ref: Param, size: 1, loc: -3] [type int] [line: 44]
!   Child: 1  Compound [ref: None, size: -4, loc: 0] [type void] [line: 45]
!   !   Child: 1  Return [type void] [line: 46]
!   !   !   Child: 0  Op: [ [type int] [line: 46]
!   !   !   !   Child: 0  Id: board is array [ref: Global, size: 82, loc: -1] [type int] [line: 46]
!   !   !   !   Child: 1  Op: + [type int] [line: 46]
!   !   !   !   !   Child: 0  Op: * [type int] [line: 46]
!   !   !   !   !   !   Child: 0  Id: row [ref: Param, size: 1, loc: -2] [type int] [line: 46]
!   !   !   !   !   !   Child: 1  Const: 9 [type int] [line: 46]
!   !   !   !   !   Child: 1  Id: col [ref: Param, size: 1, loc: -3] [type int] [line: 46]
Sibling: 11  Func setLocked [ref: Global, size: -5, loc: 0] [type void] [line: 50]
!   Child: 0  Param row [ref: Param, size: 1, loc: -2] [type int] [line: 50]
!   Sibling: 0  Param col [ref: Param, size: 1, loc: -3] [type int] [line: 50]
!   Sibling: 1  Param value [ref: Param, size: 1, loc: -4] [type bool] [line: 50]
!   Child: 1  Compound [ref: None, size: -5, loc: 0] [type void] [line: 51]
!   !   Child: 1  Assign: = [type bool] [line: 52]
!   !   !   Child: 0  Op: [ [type bool] [line: 52]
!   !   !   !   Child: 0  Id: locked is array [ref: Global, size: 82, loc: -83] [type bool] [line: 52]
!   !   !   !   Child: 1  Op: + [type int] [line: 52]
!   !   !   !   !   Child: 0  Op: * [type int] [line: 52]
!   !   !   !   !   !   Child: 0  Id: row [ref: Param, size: 1, loc: -2] [type int] [line: 52]
!   !   !   !   !   !   Child: 1  Const: 9 [type int] [line: 52]
!   !   !   !   !   Child: 1  Id: col [ref: Param, size: 1, loc: -3] [type int] [line: 52]
!   !   !   Child: 1  Id: value [ref: Param, size: 1, loc: -4] [type bool] [line: 52]
Sibling: 12  Func getLocked [ref: Global, size: -4, loc: 0] [type bool] [line: 56]
!   Child: 0  Param row [ref: Param, size: 1, loc: -2] [type int] [line: 56]
!   Sibling: 0  Param col [ref: Param, size: 1, loc: -3] [type int] [line: 56]
!   Child: 1  Compound [ref: None, size: -4, loc: 0] [type void] [line: 57]
!   !   Child: 1  Return [type void] [line: 58]
!   !   !   Child: 0  Op: [ [type bool] [line: 58]
!   !   !   !   Child: 0  Id: locked is array [ref: Global, size: 82, loc: -83] [type bool] [line: 58]
!   !   !   !   Child: 1  Op: + [type int] [line: 58]
!   !   !   !   !   Child: 0  Op: * [type int] [line: 58]
!   !   !   !   !   !   Child: 0  Id: row [ref: Param, size: 1, loc: -2] [type int] [line: 58]
!   !   !   !   !   !   Child: 1  Const: 9 [type int] [line: 58]
!   !   !   !   !   Child: 1  Id: col [ref: Param, size: 1, loc: -3] [type int] [line: 58]
Sibling: 13  Func isOkAt [ref: Global, size: -9, loc: 0] [type bool] [line: 62]
!   Child: 0  Param row [ref: Param, size: 1, loc: -2] [type int] [line: 62]
!   Sibling: 0  Param col [ref: Param, size: 1, loc: -3] [type int] [line: 62]
!   Sibling: 1  Param value [ref: Param, size: 1, loc: -4] [type int] [line: 62]
!   Child: 1  Compound [ref: None, size: -9, loc: 0] [type void] [line: 63]
!   !   Child: 0  Var: i [ref: Local, size: 1, loc: -5] [type int] [line: 64]
!   !   Sibling: 0  Var: j [ref: Local, size: 1, loc: -6] [type int] [line: 64]
!   !   Sibling: 1  Var: boxRowStart [ref: Local, size: 1, loc: -7] [type int] [line: 64]
!   !   Sibling: 2  Var: boxColStart [ref: Local, size: 1, loc: -8] [type int] [line: 64]
!   !   Child: 1  Assign: = [type int] [line: 67]
!   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -5] [type int] [line: 67]
!   !   !   Child: 1  Const: 0 [type int] [line: 67]
!   !   Sibling: 0  While  [type void] [line: 68]
!   !   !   Child: 0  Op: < [type bool] [line: 68]
!   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -5] [type int] [line: 68]
!   !   !   !   Child: 1  Const: 9 [type int] [line: 68]
!   !   !   Child: 1  Compound [ref: None, size: -9, loc: 0] [type void] [line: 68]
!   !   !   !   Child: 1  If  [type void] [line: 69]
!   !   !   !   !   Child: 0  Op: == [type bool] [line: 69]
!   !   !   !   !   !   Child: 0  Call: getValue [type int] [line: 69]
!   !   !   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -5] [type int] [line: 69]
!   !   !   !   !   !   !   Sibling: 0  Id: col [ref: Param, size: 1, loc: -3] [type int] [line: 69]
!   !   !   !   !   !   Child: 1  Id: value [ref: Param, size: 1, loc: -4] [type int] [line: 69]
!   !   !   !   !   Child: 1  Return [type void] [line: 69]
!   !   !   !   !   !   Child: 0  Const: false [type bool] [line: 69]
!   !   !   !   Sibling: 0  If  [type void] [line: 70]
!   !   !   !   !   Child: 0  Op: == [type bool] [line: 70]
!   !   !   !   !   !   Child: 0  Call: getValue [type int] [line: 70]
!   !   !   !   !   !   !   Child: 0  Id: row [ref: Param, size: 1, loc: -2] [type int] [line: 70]
!   !   !   !   !   !   !   Sibling: 0  Id: i [ref: Local, size: 1, loc: -5] [type int] [line: 70]
!   !   !   !   !   !   Child: 1  Id: value [ref: Param, size: 1, loc: -4] [type int] [line: 70]
!   !   !   !   !   Child: 1  Return [type void] [line: 70]
!   !   !   !   !   !   Child: 0  Const: false [type bool] [line: 70]
!   !   !   !   Sibling: 1  Assign: ++ [type int] [line: 71]
!   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -5] [type int] [line: 71]
!   !   Sibling: 1  Assign: = [type int] [line: 75]
!   !   !   Child: 0  Id: boxRowStart [ref: Local, size: 1, loc: -7] [type int] [line: 75]
!   !   !   Child: 1  Op: * [type int] [line: 75]
!   !   !   !   Child: 0  Op: / [type int] [line: 75]
!   !   !   !   !   Child: 0  Id: row [ref: Param, size: 1, loc: -2] [type int] [line: 75]
!   !   !   !   !   Child: 1  Const: 3 [type int] [line: 75]
!   !   !   !   Child: 1  Const: 3 [type int] [line: 75]
!   !   Sibling: 2  Assign: = [type int] [line: 76]
!   !   !   Child: 0  Id: boxColStart [ref: Local, size: 1, loc: -8] [type int] [line: 76]
!   !   !   Child: 1  Op: * [type int] [line: 76]
!   !   !   !   Child: 0  Op: / [type int] [line: 76]
!   !   !   !   !   Child: 0  Id: col [ref: Param, size: 1, loc: -3] [type int] [line: 76]
!   !   !   !   !   Child: 1  Const: 3 [type int] [line: 76]
!   !   !   !   Child: 1  Const: 3 [type int] [line: 76]
!   !   Sibling: 3  Assign: = [type int] [line: 77]
!   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -5] [type int] [line: 77]
!   !   !   Child: 1  Const: 0 [type int] [line: 77]
!   !   Sibling: 4  While  [type void] [line: 78]
!   !   !   Child: 0  Op: < [type bool] [line: 78]
!   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -5] [type int] [line: 78]
!   !   !   !   Child: 1  Const: 3 [type int] [line: 78]
!   !   !   Child: 1  Compound [ref: None, size: -9, loc: 0] [type void] [line: 78]
!   !   !   !   Child: 1  Assign: = [type int] [line: 79]
!   !   !   !   !   Child: 0  Id: j [ref: Local, size: 1, loc: -6] [type int] [line: 79]
!   !   !   !   !   Child: 1  Const: 0 [type int] [line: 79]
!   !   !   !   Sibling: 0  While  [type void] [line: 80]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 80]
!   !   !   !   !   !   Child: 0  Id: j [ref: Local, size: 1, loc: -6] [type int] [line: 80]
!   !   !   !   !   !   Child: 1  Const: 3 [type int] [line: 80]
!   !   !   !   !   Child: 1  Compound [ref: None, size: -9, loc: 0] [type void] [line: 80]
!   !   !   !   !   !   Child: 1  If  [type void] [line: 81]
!   !   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 81]
!   !   !   !   !   !   !   !   Child: 0  Call: getValue [type int] [line: 81]
!   !   !   !   !   !   !   !   !   Child: 0  Op: + [type int] [line: 81]
!   !   !   !   !   !   !   !   !   !   Child: 0  Id: boxRowStart [ref: Local, size: 1, loc: -7] [type int] [line: 81]
!   !   !   !   !   !   !   !   !   !   Child: 1  Id: i [ref: Local, size: 1, loc: -5] [type int] [line: 81]
!   !   !   !   !   !   !   !   !   Sibling: 0  Op: + [type int] [line: 81]
!   !   !   !   !   !   !   !   !   !   Child: 0  Id: boxColStart [ref: Local, size: 1, loc: -8] [type int] [line: 81]
!   !   !   !   !   !   !   !   !   !   Child: 1  Id: j [ref: Local, size: 1, loc: -6] [type int] [line: 81]
!   !   !   !   !   !   !   !   Child: 1  Id: value [ref: Param, size: 1, loc: -4] [type int] [line: 81]
!   !   !   !   !   !   !   Child: 1  Return [type void] [line: 81]
!   !   !   !   !   !   !   !   Child: 0  Const: false [type bool] [line: 81]
!   !   !   !   !   !   Sibling: 0  Assign: ++ [type int] [line: 82]
!   !   !   !   !   !   !   Child: 0  Id: j [ref: Local, size: 1, loc: -6] [type int] [line: 82]
!   !   !   !   Sibling: 1  Assign: ++ [type int] [line: 84]
!   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -5] [type int] [line: 84]
!   !   Sibling: 5  Return [type void] [line: 87]
!   !   !   Child: 0  Const: true [type bool] [line: 87]
Sibling: 14  Func search [ref: Global, size: -6, loc: 0] [type bool] [line: 91]
!   Child: 0  Param i [ref: Param, size: 1, loc: -2] [type int] [line: 91]
!   Sibling: 0  Param j [ref: Param, size: 1, loc: -3] [type int] [line: 91]
!   Child: 1  Compound [ref: None, size: -4, loc: 0] [type void] [line: 92]
!   !   Child: 1  If  [type void] [line: 93]
!   !   !   Child: 0  Call: getLocked [type bool] [line: 93]
!   !   !   !   Child: 0  Id: i [ref: Param, size: 1, loc: -2] [type int] [line: 93]
!   !   !   !   Sibling: 0  Id: j [ref: Param, size: 1, loc: -3] [type int] [line: 93]
!   !   !   Child: 1  Compound [ref: None, size: -4, loc: 0] [type void] [line: 94]
!   !   !   !   Child: 1  If  [type void] [line: 95]
!   !   !   !   !   Child: 0  Op: and [type bool] [line: 95]
!   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 95]
!   !   !   !   !   !   !   Child: 0  Id: i [ref: Param, size: 1, loc: -2] [type int] [line: 95]
!   !   !   !   !   !   !   Child: 1  Const: 8 [type int] [line: 95]
!   !   !   !   !   !   Child: 1  Op: == [type bool] [line: 95]
!   !   !   !   !   !   !   Child: 0  Id: j [ref: Param, size: 1, loc: -3] [type int] [line: 95]
!   !   !   !   !   !   !   Child: 1  Const: 8 [type int] [line: 95]
!   !   !   !   !   Child: 1  Return [type void] [line: 95]
!   !   !   !   !   !   Child: 0  Const: true [type bool] [line: 95]
!   !   !   !   !   Child: 2  If  [type void] [line: 96]
!   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 96]
!   !   !   !   !   !   !   Child: 0  Id: j [ref: Param, size: 1, loc: -3] [type int] [line: 96]
!   !   !   !   !   !   !   Child: 1  Const: 8 [type int] [line: 96]
!   !   !   !   !   !   Child: 1  Return [type void] [line: 96]
!   !   !   !   !   !   !   Child: 0  Call: search [type bool] [line: 96]
!   !   !   !   !   !   !   !   Child: 0  Op: + [type int] [line: 96]
!   !   !   !   !   !   !   !   !   Child: 0  Id: i [ref: Param, size: 1, loc: -2] [type int] [line: 96]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 96]
!   !   !   !   !   !   !   !   Sibling: 0  Const: 0 [type int] [line: 96]
!   !   !   !   !   !   Child: 2  Return [type void] [line: 97]
!   !   !   !   !   !   !   Child: 0  Call: search [type bool] [line: 97]
!   !   !   !   !   !   !   !   Child: 0  Id: i [ref: Param, size: 1, loc: -2] [type int] [line: 97]
!   !   !   !   !   !   !   !   Sibling: 0  Op: + [type int] [line: 97]
!   !   !   !   !   !   !   !   !   Child: 0  Id: j [ref: Param, size: 1, loc: -3] [type int] [line: 97]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 97]
!   !   !   Child: 2  Compound [ref: None, size: -6, loc: 0] [type void] [line: 100]
!   !   !   !   Child: 0  Var: n [ref: Local, size: 1, loc: -4] [type int] [line: 101]
!   !   !   !   Sibling: 0  Var: foundOne [ref: Local, size: 1, loc: -5] [type bool] [line: 102]
!   !   !   !   Child: 1  Assign: = [type int] [line: 103]
!   !   !   !   !   Child: 0  Id: n [ref: Local, size: 1, loc: -4] [type int] [line: 103]
!   !   !   !   !   Child: 1  Const: 1 [type int] [line: 103]
!   !   !   !   Sibling: 0  While  [type void] [line: 104]
!   !   !   !   !   Child: 0  Op: <= [type bool] [line: 104]
!   !   !   !   !   !   Child: 0  Id: n [ref: Local, size: 1, loc: -4] [type int] [line: 104]
!   !   !   !   !   !   Child: 1  Const: 9 [type int] [line: 104]
!   !   !   !   !   Child: 1  Compound [ref: None, size: -6, loc: 0] [type void] [line: 104]
!   !   !   !   !   !   Child: 1  If  [type void] [line: 105]
!   !   !   !   !   !   !   Child: 0  Call: isOkAt [type bool] [line: 105]
!   !   !   !   !   !   !   !   Child: 0  Id: i [ref: Param, size: 1, loc: -2] [type int] [line: 105]
!   !   !   !   !   !   !   !   Sibling: 0  Id: j [ref: Param, size: 1, loc: -3] [type int] [line: 105]
!   !   !   !   !   !   !   !   Sibling: 1  Id: n [ref: Local, size: 1, loc: -4] [type int] [line: 105]
!   !   !   !   !   !   !   Child: 1  Compound [ref: None, size: -6, loc: 0] [type void] [line: 105]
!   !   !   !   !   !   !   !   Child: 1  Call: setValue [type void] [line: 106]
!   !   !   !   !   !   !   !   !   Child: 0  Id: i [ref: Param, size: 1, loc: -2] [type int] [line: 106]
!   !   !   !   !   !   !   !   !   Sibling: 0  Id: j [ref: Param, size: 1, loc: -3] [type int] [line: 106]
!   !   !   !   !   !   !   !   !   Sibling: 1  Id: n [ref: Local, size: 1, loc: -4] [type int] [line: 106]
!   !   !   !   !   !   !   !   Sibling: 0  If  [type void] [line: 107]
!   !   !   !   !   !   !   !   !   Child: 0  Op: and [type bool] [line: 107]
!   !   !   !   !   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 107]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: i [ref: Param, size: 1, loc: -2] [type int] [line: 107]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: 8 [type int] [line: 107]
!   !   !   !   !   !   !   !   !   !   Child: 1  Op: == [type bool] [line: 107]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: j [ref: Param, size: 1, loc: -3] [type int] [line: 107]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: 8 [type int] [line: 107]
!   !   !   !   !   !   !   !   !   Child: 1  Return [type void] [line: 107]
!   !   !   !   !   !   !   !   !   !   Child: 0  Const: true [type bool] [line: 107]
!   !   !   !   !   !   !   !   !   Child: 2  If  [type void] [line: 108]
!   !   !   !   !   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 108]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: j [ref: Param, size: 1, loc: -3] [type int] [line: 108]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: 8 [type int] [line: 108]
!   !   !   !   !   !   !   !   !   !   Child: 1  Assign: = [type bool] [line: 108]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: foundOne [ref: Local, size: 1, loc: -5] [type bool] [line: 108]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Call: search [type bool] [line: 108]
!   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Op: + [type int] [line: 108]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: i [ref: Param, size: 1, loc: -2] [type int] [line: 108]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 108]
!   !   !   !   !   !   !   !   !   !   !   !   Sibling: 0  Const: 0 [type int] [line: 108]
!   !   !   !   !   !   !   !   !   !   Child: 2  Assign: = [type bool] [line: 109]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: foundOne [ref: Local, size: 1, loc: -5] [type bool] [line: 109]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Call: search [type bool] [line: 109]
!   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: i [ref: Param, size: 1, loc: -2] [type int] [line: 109]
!   !   !   !   !   !   !   !   !   !   !   !   Sibling: 0  Op: + [type int] [line: 109]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: j [ref: Param, size: 1, loc: -3] [type int] [line: 109]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 109]
!   !   !   !   !   !   !   !   Sibling: 1  If  [type void] [line: 110]
!   !   !   !   !   !   !   !   !   Child: 0  Id: foundOne [ref: Local, size: 1, loc: -5] [type bool] [line: 110]
!   !   !   !   !   !   !   !   !   Child: 1  Return [type void] [line: 110]
!   !   !   !   !   !   !   !   !   !   Child: 0  Const: true [type bool] [line: 110]
!   !   !   !   !   !   !   !   !   Child: 2  Call: setValue [type void] [line: 111]
!   !   !   !   !   !   !   !   !   !   Child: 0  Id: i [ref: Param, size: 1, loc: -2] [type int] [line: 111]
!   !   !   !   !   !   !   !   !   !   Sibling: 0  Id: j [ref: Param, size: 1, loc: -3] [type int] [line: 111]
!   !   !   !   !   !   !   !   !   !   Sibling: 1  Const: 0 [type int] [line: 111]
!   !   !   !   !   !   Sibling: 0  Assign: ++ [type int] [line: 113]
!   !   !   !   !   !   !   Child: 0  Id: n [ref: Local, size: 1, loc: -4] [type int] [line: 113]
!   !   Sibling: 0  Return [type void] [line: 116]
!   !   !   Child: 0  Const: false [type bool] [line: 116]
Sibling: 15  Func searchTrivial [ref: Global, size: -8, loc: 0] [type void] [line: 120]
!   Child: 1  Compound [ref: None, size: -8, loc: 0] [type void] [line: 121]
!   !   Child: 0  Var: i [ref: Local, size: 1, loc: -2] [type int] [line: 122]
!   !   Sibling: 0  Var: j [ref: Local, size: 1, loc: -3] [type int] [line: 122]
!   !   Sibling: 1  Var: test [ref: Local, size: 1, loc: -4] [type int] [line: 122]
!   !   Sibling: 2  Var: value [ref: Local, size: 1, loc: -5] [type int] [line: 122]
!   !   Sibling: 3  Var: changed [ref: Local, size: 1, loc: -6] [type bool] [line: 123]
!   !   Sibling: 4  Var: foundOne [ref: Local, size: 1, loc: -7] [type bool] [line: 123]
!   !   Child: 1  Assign: = [type bool] [line: 125]
!   !   !   Child: 0  Id: changed [ref: Local, size: 1, loc: -6] [type bool] [line: 125]
!   !   !   Child: 1  Const: true [type bool] [line: 125]
!   !   Sibling: 0  While  [type void] [line: 126]
!   !   !   Child: 0  Id: changed [ref: Local, size: 1, loc: -6] [type bool] [line: 126]
!   !   !   Child: 1  Compound [ref: None, size: -8, loc: 0] [type void] [line: 126]
!   !   !   !   Child: 1  Assign: = [type bool] [line: 127]
!   !   !   !   !   Child: 0  Id: changed [ref: Local, size: 1, loc: -6] [type bool] [line: 127]
!   !   !   !   !   Child: 1  Const: false [type bool] [line: 127]
!   !   !   !   Sibling: 0  Assign: = [type int] [line: 128]
!   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 128]
!   !   !   !   !   Child: 1  Const: 0 [type int] [line: 128]
!   !   !   !   Sibling: 1  While  [type void] [line: 129]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 129]
!   !   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 129]
!   !   !   !   !   !   Child: 1  Const: 9 [type int] [line: 129]
!   !   !   !   !   Child: 1  Compound [ref: None, size: -8, loc: 0] [type void] [line: 129]
!   !   !   !   !   !   Child: 1  Assign: = [type int] [line: 130]
!   !   !   !   !   !   !   Child: 0  Id: j [ref: Local, size: 1, loc: -3] [type int] [line: 130]
!   !   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 130]
!   !   !   !   !   !   Sibling: 0  While  [type void] [line: 131]
!   !   !   !   !   !   !   Child: 0  Op: < [type bool] [line: 131]
!   !   !   !   !   !   !   !   Child: 0  Id: j [ref: Local, size: 1, loc: -3] [type int] [line: 131]
!   !   !   !   !   !   !   !   Child: 1  Const: 9 [type int] [line: 131]
!   !   !   !   !   !   !   Child: 1  Compound [ref: None, size: -8, loc: 0] [type void] [line: 131]
!   !   !   !   !   !   !   !   Child: 1  If  [type void] [line: 132]
!   !   !   !   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 132]
!   !   !   !   !   !   !   !   !   !   Child: 0  Call: getLocked [type bool] [line: 132]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 132]
!   !   !   !   !   !   !   !   !   !   !   Sibling: 0  Id: j [ref: Local, size: 1, loc: -3] [type int] [line: 132]
!   !   !   !   !   !   !   !   !   !   Child: 1  Const: false [type bool] [line: 132]
!   !   !   !   !   !   !   !   !   Child: 1  Compound [ref: None, size: -8, loc: 0] [type void] [line: 132]
!   !   !   !   !   !   !   !   !   !   Child: 1  Assign: = [type int] [line: 133]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: test [ref: Local, size: 1, loc: -4] [type int] [line: 133]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 133]
!   !   !   !   !   !   !   !   !   !   Sibling: 0  Assign: = [type bool] [line: 134]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: foundOne [ref: Local, size: 1, loc: -7] [type bool] [line: 134]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: false [type bool] [line: 134]
!   !   !   !   !   !   !   !   !   !   Sibling: 1  While  [type void] [line: 135]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Op: <= [type bool] [line: 135]
!   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: test [ref: Local, size: 1, loc: -4] [type int] [line: 135]
!   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: 9 [type int] [line: 135]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Compound [ref: None, size: -8, loc: 0] [type void] [line: 135]
!   !   !   !   !   !   !   !   !   !   !   !   Child: 1  If  [type void] [line: 136]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Call: isOkAt [type bool] [line: 136]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 136]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   Sibling: 0  Id: j [ref: Local, size: 1, loc: -3] [type int] [line: 136]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   Sibling: 1  Id: test [ref: Local, size: 1, loc: -4] [type int] [line: 136]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Compound [ref: None, size: -8, loc: 0] [type void] [line: 136]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   Child: 1  If  [type void] [line: 137]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: foundOne [ref: Local, size: 1, loc: -7] [type bool] [line: 137]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Compound [ref: None, size: -8, loc: 0] [type void] [line: 137]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Assign: = [type bool] [line: 138]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: foundOne [ref: Local, size: 1, loc: -7] [type bool] [line: 138]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: false [type bool] [line: 138]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   Sibling: 0  Break [type void] [line: 139]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   !   Child: 2  Compound [ref: None, size: -8, loc: 0] [type void] [line: 141]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Assign: = [type bool] [line: 142]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: foundOne [ref: Local, size: 1, loc: -7] [type bool] [line: 142]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: true [type bool] [line: 142]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   Sibling: 0  Assign: = [type int] [line: 143]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: value [ref: Local, size: 1, loc: -5] [type int] [line: 143]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Id: test [ref: Local, size: 1, loc: -4] [type int] [line: 143]
!   !   !   !   !   !   !   !   !   !   !   !   Sibling: 0  Assign: ++ [type int] [line: 146]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: test [ref: Local, size: 1, loc: -4] [type int] [line: 146]
!   !   !   !   !   !   !   !   !   !   Sibling: 2  If  [type void] [line: 148]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: foundOne [ref: Local, size: 1, loc: -7] [type bool] [line: 148]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Compound [ref: None, size: -8, loc: 0] [type void] [line: 148]
!   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Call: setValue [type void] [line: 149]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 149]
!   !   !   !   !   !   !   !   !   !   !   !   !   Sibling: 0  Id: j [ref: Local, size: 1, loc: -3] [type int] [line: 149]
!   !   !   !   !   !   !   !   !   !   !   !   !   Sibling: 1  Id: value [ref: Local, size: 1, loc: -5] [type int] [line: 149]
!   !   !   !   !   !   !   !   !   !   !   !   Sibling: 0  Call: setLocked [type void] [line: 150]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 150]
!   !   !   !   !   !   !   !   !   !   !   !   !   Sibling: 0  Id: j [ref: Local, size: 1, loc: -3] [type int] [line: 150]
!   !   !   !   !   !   !   !   !   !   !   !   !   Sibling: 1  Const: true [type bool] [line: 150]
!   !   !   !   !   !   !   !   !   !   !   !   Sibling: 1  Assign: = [type bool] [line: 151]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: changed [ref: Local, size: 1, loc: -6] [type bool] [line: 151]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: true [type bool] [line: 151]
!   !   !   !   !   !   !   !   Sibling: 0  Assign: ++ [type int] [line: 154]
!   !   !   !   !   !   !   !   !   Child: 0  Id: j [ref: Local, size: 1, loc: -3] [type int] [line: 154]
!   !   !   !   !   !   Sibling: 1  Assign: ++ [type int] [line: 156]
!   !   !   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 156]
Sibling: 16  Func solve [ref: Global, size: -5, loc: 0] [type bool] [line: 162]
!   Child: 1  Compound [ref: None, size: -5, loc: 0] [type void] [line: 163]
!   !   Child: 0  Var: i [ref: Local, size: 1, loc: -2] [type int] [line: 164]
!   !   Sibling: 0  Var: j [ref: Local, size: 1, loc: -3] [type int] [line: 164]
!   !   Sibling: 1  Var: n [ref: Local, size: 1, loc: -4] [type int] [line: 164]
!   !   Child: 1  Assign: = [type int] [line: 165]
!   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 165]
!   !   !   Child: 1  Const: 0 [type int] [line: 165]
!   !   Sibling: 0  While  [type void] [line: 168]
!   !   !   Child: 0  Op: < [type bool] [line: 168]
!   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 168]
!   !   !   !   Child: 1  Const: 9 [type int] [line: 168]
!   !   !   Child: 1  Compound [ref: None, size: -5, loc: 0] [type void] [line: 168]
!   !   !   !   Child: 1  Assign: = [type int] [line: 169]
!   !   !   !   !   Child: 0  Id: j [ref: Local, size: 1, loc: -3] [type int] [line: 169]
!   !   !   !   !   Child: 1  Const: 0 [type int] [line: 169]
!   !   !   !   Sibling: 0  While  [type void] [line: 170]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 170]
!   !   !   !   !   !   Child: 0  Id: j [ref: Local, size: 1, loc: -3] [type int] [line: 170]
!   !   !   !   !   !   Child: 1  Const: 9 [type int] [line: 170]
!   !   !   !   !   Child: 1  Compound [ref: None, size: -5, loc: 0] [type void] [line: 170]
!   !   !   !   !   !   Child: 1  Assign: = [type int] [line: 171]
!   !   !   !   !   !   !   Child: 0  Id: n [ref: Local, size: 1, loc: -4] [type int] [line: 171]
!   !   !   !   !   !   !   Child: 1  Call: getValue [type int] [line: 171]
!   !   !   !   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 171]
!   !   !   !   !   !   !   !   Sibling: 0  Id: j [ref: Local, size: 1, loc: -3] [type int] [line: 171]
!   !   !   !   !   !   Sibling: 0  Call: setValue [type void] [line: 172]
!   !   !   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 172]
!   !   !   !   !   !   !   Sibling: 0  Id: j [ref: Local, size: 1, loc: -3] [type int] [line: 172]
!   !   !   !   !   !   !   Sibling: 1  Const: 0 [type int] [line: 172]
!   !   !   !   !   !   Sibling: 1  If  [type void] [line: 173]
!   !   !   !   !   !   !   Child: 0  Op: and [type bool] [line: 173]
!   !   !   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 173]
!   !   !   !   !   !   !   !   !   Child: 0  Call: getLocked [type bool] [line: 173]
!   !   !   !   !   !   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 173]
!   !   !   !   !   !   !   !   !   !   Sibling: 0  Id: j [ref: Local, size: 1, loc: -3] [type int] [line: 173]
!   !   !   !   !   !   !   !   !   Child: 1  Const: true [type bool] [line: 173]
!   !   !   !   !   !   !   !   Child: 1  Op: == [type bool] [line: 173]
!   !   !   !   !   !   !   !   !   Child: 0  Call: isOkAt [type bool] [line: 173]
!   !   !   !   !   !   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 173]
!   !   !   !   !   !   !   !   !   !   Sibling: 0  Id: j [ref: Local, size: 1, loc: -3] [type int] [line: 173]
!   !   !   !   !   !   !   !   !   !   Sibling: 1  Id: n [ref: Local, size: 1, loc: -4] [type int] [line: 173]
!   !   !   !   !   !   !   !   !   Child: 1  Const: false [type bool] [line: 173]
!   !   !   !   !   !   !   Child: 1  Return [type void] [line: 174]
!   !   !   !   !   !   !   !   Child: 0  Const: false [type bool] [line: 174]
!   !   !   !   !   !   Sibling: 2  Call: setValue [type void] [line: 175]
!   !   !   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 175]
!   !   !   !   !   !   !   Sibling: 0  Id: j [ref: Local, size: 1, loc: -3] [type int] [line: 175]
!   !   !   !   !   !   !   Sibling: 1  Id: n [ref: Local, size: 1, loc: -4] [type int] [line: 175]
!   !   !   !   !   !   Sibling: 3  Assign: ++ [type int] [line: 176]
!   !   !   !   !   !   !   Child: 0  Id: j [ref: Local, size: 1, loc: -3] [type int] [line: 176]
!   !   !   !   Sibling: 1  Assign: ++ [type int] [line: 178]
!   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 178]
!   !   Sibling: 1  Call: searchTrivial [type void] [line: 181]
!   !   Sibling: 2  Return [type void] [line: 182]
!   !   !   Child: 0  Call: search [type bool] [line: 182]
!   !   !   !   Child: 0  Const: 0 [type int] [line: 182]
!   !   !   !   Sibling: 0  Const: 0 [type int] [line: 182]
Sibling: 17  Func showBoard [ref: Global, size: -4, loc: 0] [type void] [line: 186]
!   Child: 1  Compound [ref: None, size: -4, loc: 0] [type void] [line: 187]
!   !   Child: 0  Var: i [ref: Local, size: 1, loc: -2] [type int] [line: 188]
!   !   Sibling: 0  Var: j [ref: Local, size: 1, loc: -3] [type int] [line: 188]
!   !   Child: 1  Call: outnl [type void] [line: 189]
!   !   Sibling: 0  Assign: = [type int] [line: 190]
!   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 190]
!   !   !   Child: 1  Const: 0 [type int] [line: 190]
!   !   Sibling: 1  While  [type void] [line: 191]
!   !   !   Child: 0  Op: < [type bool] [line: 191]
!   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 191]
!   !   !   !   Child: 1  Const: 9 [type int] [line: 191]
!   !   !   Child: 1  Compound [ref: None, size: -4, loc: 0] [type void] [line: 191]
!   !   !   !   Child: 1  Assign: = [type int] [line: 192]
!   !   !   !   !   Child: 0  Id: j [ref: Local, size: 1, loc: -3] [type int] [line: 192]
!   !   !   !   !   Child: 1  Const: 0 [type int] [line: 192]
!   !   !   !   Sibling: 0  While  [type void] [line: 193]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 193]
!   !   !   !   !   !   Child: 0  Id: j [ref: Local, size: 1, loc: -3] [type int] [line: 193]
!   !   !   !   !   !   Child: 1  Const: 9 [type int] [line: 193]
!   !   !   !   !   Child: 1  Compound [ref: None, size: -4, loc: 0] [type void] [line: 193]
!   !   !   !   !   !   Child: 1  Call: output [type void] [line: 194]
!   !   !   !   !   !   !   Child: 0  Call: getValue [type int] [line: 194]
!   !   !   !   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 194]
!   !   !   !   !   !   !   !   Sibling: 0  Id: j [ref: Local, size: 1, loc: -3] [type int] [line: 194]
!   !   !   !   !   !   Sibling: 0  Assign: ++ [type int] [line: 195]
!   !   !   !   !   !   !   Child: 0  Id: j [ref: Local, size: 1, loc: -3] [type int] [line: 195]
!   !   !   !   Sibling: 1  Call: outnl [type void] [line: 197]
!   !   !   !   Sibling: 2  Assign: ++ [type int] [line: 198]
!   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 198]
!   !   Sibling: 2  Call: outnl [type void] [line: 200]
Sibling: 18  Func getInput [ref: Global, size: -5, loc: 0] [type void] [line: 204]
!   Child: 1  Compound [ref: None, size: -5, loc: 0] [type void] [line: 205]
!   !   Child: 0  Var: i [ref: Local, size: 1, loc: -2] [type int] [line: 206]
!   !   Sibling: 0  Var: j [ref: Local, size: 1, loc: -3] [type int] [line: 206]
!   !   Sibling: 1  Var: inputVal [ref: Local, size: 1, loc: -4] [type int] [line: 206]
!   !   Child: 1  Assign: = [type int] [line: 207]
!   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 207]
!   !   !   Child: 1  Const: 0 [type int] [line: 207]
!   !   Sibling: 0  While  [type void] [line: 208]
!   !   !   Child: 0  Op: < [type bool] [line: 208]
!   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 208]
!   !   !   !   Child: 1  Const: 9 [type int] [line: 208]
!   !   !   Child: 1  Compound [ref: None, size: -5, loc: 0] [type void] [line: 208]
!   !   !   !   Child: 1  Assign: = [type int] [line: 209]
!   !   !   !   !   Child: 0  Id: j [ref: Local, size: 1, loc: -3] [type int] [line: 209]
!   !   !   !   !   Child: 1  Const: 0 [type int] [line: 209]
!   !   !   !   Sibling: 0  While  [type void] [line: 210]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 210]
!   !   !   !   !   !   Child: 0  Id: j [ref: Local, size: 1, loc: -3] [type int] [line: 210]
!   !   !   !   !   !   Child: 1  Const: 9 [type int] [line: 210]
!   !   !   !   !   Child: 1  Compound [ref: None, size: -5, loc: 0] [type void] [line: 210]
!   !   !   !   !   !   Child: 1  Assign: = [type int] [line: 211]
!   !   !   !   !   !   !   Child: 0  Id: inputVal [ref: Local, size: 1, loc: -4] [type int] [line: 211]
!   !   !   !   !   !   !   Child: 1  Call: input [type int] [line: 211]
!   !   !   !   !   !   Sibling: 0  If  [type void] [line: 212]
!   !   !   !   !   !   !   Child: 0  Op: and [type bool] [line: 212]
!   !   !   !   !   !   !   !   Child: 0  Op: > [type bool] [line: 212]
!   !   !   !   !   !   !   !   !   Child: 0  Id: inputVal [ref: Local, size: 1, loc: -4] [type int] [line: 212]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 212]
!   !   !   !   !   !   !   !   Child: 1  Op: < [type bool] [line: 212]
!   !   !   !   !   !   !   !   !   Child: 0  Id: inputVal [ref: Local, size: 1, loc: -4] [type int] [line: 212]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 10 [type int] [line: 212]
!   !   !   !   !   !   !   Child: 1  Compound [ref: None, size: -5, loc: 0] [type void] [line: 213]
!   !   !   !   !   !   !   !   Child: 1  Call: setValue [type void] [line: 214]
!   !   !   !   !   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 214]
!   !   !   !   !   !   !   !   !   Sibling: 0  Id: j [ref: Local, size: 1, loc: -3] [type int] [line: 214]
!   !   !   !   !   !   !   !   !   Sibling: 1  Id: inputVal [ref: Local, size: 1, loc: -4] [type int] [line: 214]
!   !   !   !   !   !   !   !   Sibling: 0  Call: setLocked [type void] [line: 215]
!   !   !   !   !   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 215]
!   !   !   !   !   !   !   !   !   Sibling: 0  Id: j [ref: Local, size: 1, loc: -3] [type int] [line: 215]
!   !   !   !   !   !   !   !   !   Sibling: 1  Const: true [type bool] [line: 215]
!   !   !   !   !   !   Sibling: 1  Assign: ++ [type int] [line: 217]
!   !   !   !   !   !   !   Child: 0  Id: j [ref: Local, size: 1, loc: -3] [type int] [line: 217]
!   !   !   !   Sibling: 1  Call: outnl [type void] [line: 219]
!   !   !   !   Sibling: 2  Assign: ++ [type int] [line: 220]
!   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -2] [type int] [line: 220]
Sibling: 19  Func main [ref: Global, size: -2, loc: 0] [type int] [line: 224]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 225]
!   !   Child: 1  Call: initBoard [type void] [line: 226]
!   !   Sibling: 0  Call: getInput [type void] [line: 227]
!   !   Sibling: 1  If  [type void] [line: 228]
!   !   !   Child: 0  Call: solve [type bool] [line: 228]
!   !   !   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 228]
!   !   !   !   Child: 1  Call: showBoard [type void] [line: 229]
!   !   !   Child: 2  Compound [ref: None, size: -2, loc: 0] [type void] [line: 231]
!   !   !   !   Child: 1  Call: outputb [type void] [line: 232]
!   !   !   !   !   Child: 0  Const: false [type bool] [line: 232]
!   !   !   !   Sibling: 0  Call: outnl [type void] [line: 233]
!   !   Sibling: 2  Return [type void] [line: 235]
!   !   !   Child: 0  Const: 0 [type int] [line: 235]
Offset for end of global space: -164
Number of warnings: 0
Number of errors: 0
