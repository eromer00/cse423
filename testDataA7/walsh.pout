Func input [ref: Global, size: -2, loc: 0] [type int] [line: -1]
Sibling: 0  Func output [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy* [ref: Param, size: 1, loc: -2] [type int] [line: -1]
Sibling: 1  Func inputb [ref: Global, size: -2, loc: 0] [type bool] [line: -1]
Sibling: 2  Func outputb [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy* [ref: Param, size: 1, loc: -2] [type bool] [line: -1]
Sibling: 3  Func inputc [ref: Global, size: -2, loc: 0] [type char] [line: -1]
Sibling: 4  Func outputc [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy* [ref: Param, size: 1, loc: -2] [type char] [line: -1]
Sibling: 5  Func outnl [ref: Global, size: -2, loc: 0] [type void] [line: -1]
Sibling: 6  Func pow [ref: Global, size: -6, loc: 0] [type int] [line: 4]
!   Child: 0  Param n [ref: Param, size: 1, loc: -2] [type int] [line: 4]
!   Sibling: 0  Param p [ref: Param, size: 1, loc: -3] [type int] [line: 4]
!   Child: 1  Compound [ref: None, size: -6, loc: 0] [type void] [line: 5]
!   !   Child: 0  Var: sqr [ref: Local, size: 1, loc: -4] [type int] [line: 6]
!   !   Sibling: 0  Var: ans [ref: Local, size: 1, loc: -5] [type int] [line: 7]
!   !   Child: 1  Assign: = [type int] [line: 9]
!   !   !   Child: 0  Id: ans [ref: Local, size: 1, loc: -5] [type int] [line: 9]
!   !   !   Child: 1  Const: 1 [type int] [line: 9]
!   !   Sibling: 0  Assign: = [type int] [line: 10]
!   !   !   Child: 0  Id: sqr [ref: Local, size: 1, loc: -4] [type int] [line: 10]
!   !   !   Child: 1  Id: n [ref: Param, size: 1, loc: -2] [type int] [line: 10]
!   !   Sibling: 1  While  [type void] [line: 11]
!   !   !   Child: 0  Const: true [type bool] [line: 11]
!   !   !   Child: 1  Compound [ref: None, size: -6, loc: 0] [type void] [line: 11]
!   !   !   !   Child: 1  If  [type void] [line: 12]
!   !   !   !   !   Child: 0  Op: == [type bool] [line: 12]
!   !   !   !   !   !   Child: 0  Op: % [type int] [line: 12]
!   !   !   !   !   !   !   Child: 0  Id: p [ref: Param, size: 1, loc: -3] [type int] [line: 12]
!   !   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 12]
!   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 12]
!   !   !   !   !   Child: 1  Assign: = [type int] [line: 12]
!   !   !   !   !   !   Child: 0  Id: ans [ref: Local, size: 1, loc: -5] [type int] [line: 12]
!   !   !   !   !   !   Child: 1  Op: * [type int] [line: 12]
!   !   !   !   !   !   !   Child: 0  Id: ans [ref: Local, size: 1, loc: -5] [type int] [line: 12]
!   !   !   !   !   !   !   Child: 1  Id: sqr [ref: Local, size: 1, loc: -4] [type int] [line: 12]
!   !   !   !   Sibling: 0  Assign: = [type int] [line: 13]
!   !   !   !   !   Child: 0  Id: p [ref: Param, size: 1, loc: -3] [type int] [line: 13]
!   !   !   !   !   Child: 1  Op: / [type int] [line: 13]
!   !   !   !   !   !   Child: 0  Id: p [ref: Param, size: 1, loc: -3] [type int] [line: 13]
!   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 13]
!   !   !   !   Sibling: 1  If  [type void] [line: 14]
!   !   !   !   !   Child: 0  Op: == [type bool] [line: 14]
!   !   !   !   !   !   Child: 0  Id: p [ref: Param, size: 1, loc: -3] [type int] [line: 14]
!   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 14]
!   !   !   !   !   Child: 1  Return [type void] [line: 14]
!   !   !   !   !   !   Child: 0  Id: ans [ref: Local, size: 1, loc: -5] [type int] [line: 14]
!   !   !   !   Sibling: 2  Assign: = [type int] [line: 15]
!   !   !   !   !   Child: 0  Id: sqr [ref: Local, size: 1, loc: -4] [type int] [line: 15]
!   !   !   !   !   Child: 1  Op: * [type int] [line: 15]
!   !   !   !   !   !   Child: 0  Id: sqr [ref: Local, size: 1, loc: -4] [type int] [line: 15]
!   !   !   !   !   !   Child: 1  Id: sqr [ref: Local, size: 1, loc: -4] [type int] [line: 15]
Sibling: 7  Func getFunc [ref: Global, size: -6, loc: 0] [type int] [line: 19]
!   Child: 0  Param f is array [ref: Param, size: 1, loc: -2] [type int] [line: 19]
!   Child: 1  Compound [ref: None, size: -6, loc: 0] [type void] [line: 20]
!   !   Child: 0  Var: numbits [ref: Local, size: 1, loc: -3] [type int] [line: 21]
!   !   Sibling: 0  Var: i [ref: Local, size: 1, loc: -4] [type int] [line: 22]
!   !   Sibling: 1  Var: size [ref: Local, size: 1, loc: -5] [type int] [line: 23]
!   !   Child: 1  If  [type void] [line: 25]
!   !   !   Child: 0  Op: == [type bool] [line: 25]
!   !   !   !   Child: 0  Assign: = [type int] [line: 25]
!   !   !   !   !   Child: 0  Id: numbits [ref: Local, size: 1, loc: -3] [type int] [line: 25]
!   !   !   !   !   Child: 1  Call: input [type int] [line: 25]
!   !   !   !   Child: 1  Const: 0 [type int] [line: 25]
!   !   !   Child: 1  Return [type void] [line: 25]
!   !   !   !   Child: 0  Const: 0 [type int] [line: 25]
!   !   Sibling: 0  Assign: = [type int] [line: 26]
!   !   !   Child: 0  Id: size [ref: Local, size: 1, loc: -5] [type int] [line: 26]
!   !   !   Child: 1  Call: pow [type int] [line: 26]
!   !   !   !   Child: 0  Const: 2 [type int] [line: 26]
!   !   !   !   Sibling: 0  Id: numbits [ref: Local, size: 1, loc: -3] [type int] [line: 26]
!   !   Sibling: 1  Assign: = [type int] [line: 27]
!   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -4] [type int] [line: 27]
!   !   !   Child: 1  Const: 0 [type int] [line: 27]
!   !   Sibling: 2  While  [type void] [line: 28]
!   !   !   Child: 0  Op: < [type bool] [line: 28]
!   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -4] [type int] [line: 28]
!   !   !   !   Child: 1  Id: size [ref: Local, size: 1, loc: -5] [type int] [line: 28]
!   !   !   Child: 1  Compound [ref: None, size: -6, loc: 0] [type void] [line: 28]
!   !   !   !   Child: 1  Assign: = [type int] [line: 29]
!   !   !   !   !   Child: 0  Op: [ [type int] [line: 29]
!   !   !   !   !   !   Child: 0  Id: f is array [ref: Param, size: 1, loc: -2] [type int] [line: 29]
!   !   !   !   !   !   Child: 1  Id: i [ref: Local, size: 1, loc: -4] [type int] [line: 29]
!   !   !   !   !   Child: 1  Call: input [type int] [line: 29]
!   !   !   !   Sibling: 0  Assign: = [type int] [line: 30]
!   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -4] [type int] [line: 30]
!   !   !   !   !   Child: 1  Op: + [type int] [line: 30]
!   !   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -4] [type int] [line: 30]
!   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 30]
!   !   Sibling: 3  Return [type void] [line: 33]
!   !   !   Child: 0  Id: numbits [ref: Local, size: 1, loc: -3] [type int] [line: 33]
Sibling: 8  Func printFunc [ref: Global, size: -5, loc: 0] [type void] [line: 36]
!   Child: 0  Param f is array [ref: Param, size: 1, loc: -2] [type int] [line: 36]
!   Sibling: 0  Param size [ref: Param, size: 1, loc: -3] [type int] [line: 36]
!   Child: 1  Compound [ref: None, size: -5, loc: 0] [type void] [line: 37]
!   !   Child: 0  Var: i [ref: Local, size: 1, loc: -4] [type int] [line: 38]
!   !   Child: 1  Assign: = [type int] [line: 40]
!   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -4] [type int] [line: 40]
!   !   !   Child: 1  Const: 0 [type int] [line: 40]
!   !   Sibling: 0  While  [type void] [line: 41]
!   !   !   Child: 0  Op: < [type bool] [line: 41]
!   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -4] [type int] [line: 41]
!   !   !   !   Child: 1  Id: size [ref: Param, size: 1, loc: -3] [type int] [line: 41]
!   !   !   Child: 1  Compound [ref: None, size: -5, loc: 0] [type void] [line: 41]
!   !   !   !   Child: 1  Call: output [type void] [line: 42]
!   !   !   !   !   Child: 0  Op: [ [type int] [line: 42]
!   !   !   !   !   !   Child: 0  Id: f is array [ref: Param, size: 1, loc: -2] [type int] [line: 42]
!   !   !   !   !   !   Child: 1  Id: i [ref: Local, size: 1, loc: -4] [type int] [line: 42]
!   !   !   !   Sibling: 0  Assign: = [type int] [line: 43]
!   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -4] [type int] [line: 43]
!   !   !   !   !   Child: 1  Op: + [type int] [line: 43]
!   !   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -4] [type int] [line: 43]
!   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 43]
!   !   Sibling: 1  Call: outnl [type void] [line: 45]
Sibling: 9  Func fwt [ref: Global, size: -8, loc: 0] [type void] [line: 49]
!   Child: 0  Param w is array [ref: Param, size: 1, loc: -2] [type int] [line: 49]
!   Sibling: 0  Param start [ref: Param, size: 1, loc: -3] [type int] [line: 49]
!   Sibling: 1  Param size [ref: Param, size: 1, loc: -4] [type int] [line: 49]
!   Child: 1  Compound [ref: None, size: -8, loc: 0] [type void] [line: 50]
!   !   Child: 0  Var: a [ref: Local, size: 1, loc: -5] [type int] [line: 51]
!   !   Sibling: 0  Var: b [ref: Local, size: 1, loc: -6] [type int] [line: 51]
!   !   Sibling: 1  Var: tmp [ref: Local, size: 1, loc: -7] [type int] [line: 51]
!   !   Child: 1  Assign: = [type int] [line: 53]
!   !   !   Child: 0  Id: size [ref: Param, size: 1, loc: -4] [type int] [line: 53]
!   !   !   Child: 1  Op: / [type int] [line: 53]
!   !   !   !   Child: 0  Id: size [ref: Param, size: 1, loc: -4] [type int] [line: 53]
!   !   !   !   Child: 1  Const: 2 [type int] [line: 53]
!   !   Sibling: 0  If  [type void] [line: 54]
!   !   !   Child: 0  Op: > [type bool] [line: 54]
!   !   !   !   Child: 0  Id: size [ref: Param, size: 1, loc: -4] [type int] [line: 54]
!   !   !   !   Child: 1  Const: 1 [type int] [line: 54]
!   !   !   Child: 1  Compound [ref: None, size: -8, loc: 0] [type void] [line: 54]
!   !   !   !   Child: 1  Call: fwt [type void] [line: 55]
!   !   !   !   !   Child: 0  Id: w is array [ref: Param, size: 1, loc: -2] [type int] [line: 55]
!   !   !   !   !   Sibling: 0  Id: start [ref: Param, size: 1, loc: -3] [type int] [line: 55]
!   !   !   !   !   Sibling: 1  Id: size [ref: Param, size: 1, loc: -4] [type int] [line: 55]
!   !   !   !   Sibling: 0  Call: fwt [type void] [line: 56]
!   !   !   !   !   Child: 0  Id: w is array [ref: Param, size: 1, loc: -2] [type int] [line: 56]
!   !   !   !   !   Sibling: 0  Op: + [type int] [line: 56]
!   !   !   !   !   !   Child: 0  Id: start [ref: Param, size: 1, loc: -3] [type int] [line: 56]
!   !   !   !   !   !   Child: 1  Id: size [ref: Param, size: 1, loc: -4] [type int] [line: 56]
!   !   !   !   !   Sibling: 1  Id: size [ref: Param, size: 1, loc: -4] [type int] [line: 56]
!   !   Sibling: 1  Assign: = [type int] [line: 59]
!   !   !   Child: 0  Id: a [ref: Local, size: 1, loc: -5] [type int] [line: 59]
!   !   !   Child: 1  Id: start [ref: Param, size: 1, loc: -3] [type int] [line: 59]
!   !   Sibling: 2  Assign: = [type int] [line: 60]
!   !   !   Child: 0  Id: b [ref: Local, size: 1, loc: -6] [type int] [line: 60]
!   !   !   Child: 1  Op: + [type int] [line: 60]
!   !   !   !   Child: 0  Id: start [ref: Param, size: 1, loc: -3] [type int] [line: 60]
!   !   !   !   Child: 1  Id: size [ref: Param, size: 1, loc: -4] [type int] [line: 60]
!   !   Sibling: 3  While  [type void] [line: 61]
!   !   !   Child: 0  Op: < [type bool] [line: 61]
!   !   !   !   Child: 0  Id: a [ref: Local, size: 1, loc: -5] [type int] [line: 61]
!   !   !   !   Child: 1  Op: + [type int] [line: 61]
!   !   !   !   !   Child: 0  Id: start [ref: Param, size: 1, loc: -3] [type int] [line: 61]
!   !   !   !   !   Child: 1  Id: size [ref: Param, size: 1, loc: -4] [type int] [line: 61]
!   !   !   Child: 1  Compound [ref: None, size: -8, loc: 0] [type void] [line: 61]
!   !   !   !   Child: 1  Assign: = [type int] [line: 62]
!   !   !   !   !   Child: 0  Id: tmp [ref: Local, size: 1, loc: -7] [type int] [line: 62]
!   !   !   !   !   Child: 1  Op: [ [type int] [line: 62]
!   !   !   !   !   !   Child: 0  Id: w is array [ref: Param, size: 1, loc: -2] [type int] [line: 62]
!   !   !   !   !   !   Child: 1  Id: a [ref: Local, size: 1, loc: -5] [type int] [line: 62]
!   !   !   !   Sibling: 0  Assign: = [type int] [line: 63]
!   !   !   !   !   Child: 0  Op: [ [type int] [line: 63]
!   !   !   !   !   !   Child: 0  Id: w is array [ref: Param, size: 1, loc: -2] [type int] [line: 63]
!   !   !   !   !   !   Child: 1  Id: a [ref: Local, size: 1, loc: -5] [type int] [line: 63]
!   !   !   !   !   Child: 1  Op: + [type int] [line: 63]
!   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 63]
!   !   !   !   !   !   !   Child: 0  Id: w is array [ref: Param, size: 1, loc: -2] [type int] [line: 63]
!   !   !   !   !   !   !   Child: 1  Id: a [ref: Local, size: 1, loc: -5] [type int] [line: 63]
!   !   !   !   !   !   Child: 1  Op: [ [type int] [line: 63]
!   !   !   !   !   !   !   Child: 0  Id: w is array [ref: Param, size: 1, loc: -2] [type int] [line: 63]
!   !   !   !   !   !   !   Child: 1  Id: b [ref: Local, size: 1, loc: -6] [type int] [line: 63]
!   !   !   !   Sibling: 1  Assign: = [type int] [line: 64]
!   !   !   !   !   Child: 0  Op: [ [type int] [line: 64]
!   !   !   !   !   !   Child: 0  Id: w is array [ref: Param, size: 1, loc: -2] [type int] [line: 64]
!   !   !   !   !   !   Child: 1  Id: b [ref: Local, size: 1, loc: -6] [type int] [line: 64]
!   !   !   !   !   Child: 1  Op: - [type int] [line: 64]
!   !   !   !   !   !   Child: 0  Id: tmp [ref: Local, size: 1, loc: -7] [type int] [line: 64]
!   !   !   !   !   !   Child: 1  Op: [ [type int] [line: 64]
!   !   !   !   !   !   !   Child: 0  Id: w is array [ref: Param, size: 1, loc: -2] [type int] [line: 64]
!   !   !   !   !   !   !   Child: 1  Id: b [ref: Local, size: 1, loc: -6] [type int] [line: 64]
!   !   !   !   Sibling: 2  Assign: = [type int] [line: 65]
!   !   !   !   !   Child: 0  Id: a [ref: Local, size: 1, loc: -5] [type int] [line: 65]
!   !   !   !   !   Child: 1  Op: + [type int] [line: 65]
!   !   !   !   !   !   Child: 0  Id: a [ref: Local, size: 1, loc: -5] [type int] [line: 65]
!   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 65]
!   !   !   !   Sibling: 3  Assign: = [type int] [line: 66]
!   !   !   !   !   Child: 0  Id: b [ref: Local, size: 1, loc: -6] [type int] [line: 66]
!   !   !   !   !   Child: 1  Op: + [type int] [line: 66]
!   !   !   !   !   !   Child: 0  Id: b [ref: Local, size: 1, loc: -6] [type int] [line: 66]
!   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 66]
Sibling: 10  Func div [ref: Global, size: -5, loc: 0] [type void] [line: 70]
!   Child: 0  Param f is array [ref: Param, size: 1, loc: -2] [type int] [line: 70]
!   Sibling: 0  Param size [ref: Param, size: 1, loc: -3] [type int] [line: 70]
!   Child: 1  Compound [ref: None, size: -5, loc: 0] [type void] [line: 71]
!   !   Child: 0  Var: i [ref: Local, size: 1, loc: -4] [type int] [line: 72]
!   !   Child: 1  Assign: = [type int] [line: 74]
!   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -4] [type int] [line: 74]
!   !   !   Child: 1  Const: 0 [type int] [line: 74]
!   !   Sibling: 0  While  [type void] [line: 75]
!   !   !   Child: 0  Op: < [type bool] [line: 75]
!   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -4] [type int] [line: 75]
!   !   !   !   Child: 1  Id: size [ref: Param, size: 1, loc: -3] [type int] [line: 75]
!   !   !   Child: 1  Compound [ref: None, size: -5, loc: 0] [type void] [line: 75]
!   !   !   !   Child: 1  Assign: = [type int] [line: 76]
!   !   !   !   !   Child: 0  Op: [ [type int] [line: 76]
!   !   !   !   !   !   Child: 0  Id: f is array [ref: Param, size: 1, loc: -2] [type int] [line: 76]
!   !   !   !   !   !   Child: 1  Id: i [ref: Local, size: 1, loc: -4] [type int] [line: 76]
!   !   !   !   !   Child: 1  Op: / [type int] [line: 76]
!   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 76]
!   !   !   !   !   !   !   Child: 0  Id: f is array [ref: Param, size: 1, loc: -2] [type int] [line: 76]
!   !   !   !   !   !   !   Child: 1  Id: i [ref: Local, size: 1, loc: -4] [type int] [line: 76]
!   !   !   !   !   !   Child: 1  Id: size [ref: Param, size: 1, loc: -3] [type int] [line: 76]
!   !   !   !   Sibling: 0  Assign: ++ [type int] [line: 77]
!   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -4] [type int] [line: 77]
Sibling: 11  Func main [ref: Global, size: -263, loc: 0] [type int] [line: 81]
!   Child: 1  Compound [ref: None, size: -263, loc: 0] [type void] [line: 82]
!   !   Child: 0  Var: f is array [ref: Local, size: 257, loc: -3] [type int] [line: 83]
!   !   Sibling: 0  Var: j [ref: Local, size: 1, loc: -259] [type int] [line: 84]
!   !   Sibling: 1  Var: size [ref: Local, size: 1, loc: -260] [type int] [line: 86]
!   !   Sibling: 2  Var: numbits [ref: Local, size: 1, loc: -261] [type int] [line: 87]
!   !   Sibling: 3  Var: half [ref: Local, size: 1, loc: -262] [type int] [line: 88]
!   !   Child: 1  While  [type void] [line: 90]
!   !   !   Child: 0  Const: true [type bool] [line: 90]
!   !   !   Child: 1  Compound [ref: None, size: -263, loc: 0] [type void] [line: 90]
!   !   !   !   Child: 1  If  [type void] [line: 91]
!   !   !   !   !   Child: 0  Op: == [type bool] [line: 91]
!   !   !   !   !   !   Child: 0  Assign: = [type int] [line: 91]
!   !   !   !   !   !   !   Child: 0  Id: numbits [ref: Local, size: 1, loc: -261] [type int] [line: 91]
!   !   !   !   !   !   !   Child: 1  Call: getFunc [type int] [line: 91]
!   !   !   !   !   !   !   !   Child: 0  Id: f is array [ref: Local, size: 257, loc: -3] [type int] [line: 91]
!   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 91]
!   !   !   !   !   Child: 1  Return [type void] [line: 91]
!   !   !   !   !   !   Child: 0  Const: 0 [type int] [line: 91]
!   !   !   !   Sibling: 0  Assign: = [type int] [line: 92]
!   !   !   !   !   Child: 0  Id: size [ref: Local, size: 1, loc: -260] [type int] [line: 92]
!   !   !   !   !   Child: 1  Call: pow [type int] [line: 92]
!   !   !   !   !   !   Child: 0  Const: 2 [type int] [line: 92]
!   !   !   !   !   !   Sibling: 0  Id: numbits [ref: Local, size: 1, loc: -261] [type int] [line: 92]
!   !   !   !   Sibling: 1  Assign: = [type int] [line: 93]
!   !   !   !   !   Child: 0  Id: half [ref: Local, size: 1, loc: -262] [type int] [line: 93]
!   !   !   !   !   Child: 1  Op: / [type int] [line: 93]
!   !   !   !   !   !   Child: 0  Id: size [ref: Local, size: 1, loc: -260] [type int] [line: 93]
!   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 93]
!   !   !   !   Sibling: 2  Call: fwt [type void] [line: 95]
!   !   !   !   !   Child: 0  Id: f is array [ref: Local, size: 257, loc: -3] [type int] [line: 95]
!   !   !   !   !   Sibling: 0  Const: 0 [type int] [line: 95]
!   !   !   !   !   Sibling: 1  Id: size [ref: Local, size: 1, loc: -260] [type int] [line: 95]
!   !   !   !   Sibling: 3  Call: printFunc [type void] [line: 96]
!   !   !   !   !   Child: 0  Id: f is array [ref: Local, size: 257, loc: -3] [type int] [line: 96]
!   !   !   !   !   Sibling: 0  Id: size [ref: Local, size: 1, loc: -260] [type int] [line: 96]
!   !   !   !   Sibling: 4  Call: fwt [type void] [line: 98]
!   !   !   !   !   Child: 0  Id: f is array [ref: Local, size: 257, loc: -3] [type int] [line: 98]
!   !   !   !   !   Sibling: 0  Const: 0 [type int] [line: 98]
!   !   !   !   !   Sibling: 1  Id: size [ref: Local, size: 1, loc: -260] [type int] [line: 98]
!   !   !   !   Sibling: 5  Call: div [type void] [line: 99]
!   !   !   !   !   Child: 0  Id: f is array [ref: Local, size: 257, loc: -3] [type int] [line: 99]
!   !   !   !   !   Sibling: 0  Id: size [ref: Local, size: 1, loc: -260] [type int] [line: 99]
!   !   !   !   Sibling: 6  Call: printFunc [type void] [line: 100]
!   !   !   !   !   Child: 0  Id: f is array [ref: Local, size: 257, loc: -3] [type int] [line: 100]
!   !   !   !   !   Sibling: 0  Id: size [ref: Local, size: 1, loc: -260] [type int] [line: 100]
!   !   Sibling: 0  Return [type void] [line: 102]
!   !   !   Child: 0  Const: 0 [type int] [line: 102]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0
