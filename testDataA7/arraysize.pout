Func input [ref: Global, size: -2, loc: 0] [type int] [line: -1]
Sibling: 0  Func output [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy* [ref: Param, size: 1, loc: -2] [type int] [line: -1]
Sibling: 1  Func inputb [ref: Global, size: -2, loc: 0] [type bool] [line: -1]
Sibling: 2  Func outputb [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy* [ref: Param, size: 1, loc: -2] [type bool] [line: -1]
Sibling: 3  Func inputc [ref: Global, size: -2, loc: 0] [type char] [line: -1]
Sibling: 4  Func outputc [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy* [ref: Param, size: 1, loc: -2] [type char] [line: -1]
Sibling: 5  Func outnl [ref: Global, size: -2, loc: 0] [type void] [line: -1]
Sibling: 6  Var: g is array [ref: Global, size: 13, loc: -1] [type int] [line: 3]
Sibling: 7  Func ford [ref: Global, size: -18, loc: 0] [type void] [line: 12]
!   Child: 0  Param x is array [ref: Param, size: 1, loc: -2] [type int] [line: 12]
!   Child: 1  Compound [ref: None, size: -18, loc: 0] [type void] [line: 13]
!   !   Child: 0  Var: i [ref: Local, size: 1, loc: -3] [type int] [line: 14]
!   !   Sibling: 0  Var: y is array [ref: Local, size: 14, loc: -5] [type int] [line: 14]
!   !   Child: 1  Assign: = [type int] [line: 15]
!   !   !   Child: 0  Op: [ [type int] [line: 15]
!   !   !   !   Child: 0  Id: y is array [ref: Local, size: 14, loc: -5] [type int] [line: 15]
!   !   !   !   Child: 1  Const: 0 [type int] [line: 15]
!   !   !   Child: 1  Const: 666 [type int] [line: 15]
!   !   Sibling: 0  Assign: = [type int] [line: 16]
!   !   !   Child: 0  Op: [ [type int] [line: 16]
!   !   !   !   Child: 0  Id: g is array [ref: Global, size: 13, loc: -1] [type int] [line: 16]
!   !   !   !   Child: 1  Const: 0 [type int] [line: 16]
!   !   !   Child: 1  Const: 888 [type int] [line: 16]
!   !   Sibling: 1  Call: output [type void] [line: 17]
!   !   !   Child: 0  Op: [ [type int] [line: 17]
!   !   !   !   Child: 0  Id: x is array [ref: Param, size: 1, loc: -2] [type int] [line: 17]
!   !   !   !   Child: 1  Const: 0 [type int] [line: 17]
!   !   Sibling: 2  Call: output [type void] [line: 18]
!   !   !   Child: 0  Op: * [type int] [line: 18]
!   !   !   !   Child: 0  Id: x is array [ref: Param, size: 1, loc: -2] [type int] [line: 18]
!   !   Sibling: 3  Call: output [type void] [line: 19]
!   !   !   Child: 0  Op: [ [type int] [line: 19]
!   !   !   !   Child: 0  Id: g is array [ref: Global, size: 13, loc: -1] [type int] [line: 19]
!   !   !   !   Child: 1  Const: 0 [type int] [line: 19]
!   !   Sibling: 4  Call: output [type void] [line: 20]
!   !   !   Child: 0  Op: [ [type int] [line: 20]
!   !   !   !   Child: 0  Id: g is array [ref: Global, size: 13, loc: -1] [type int] [line: 20]
!   !   !   !   Child: 1  Op: - [type int] [line: 20]
!   !   !   !   !   Child: 0  Const: 1 [type int] [line: 20]
!   !   Sibling: 5  Call: outnl [type void] [line: 21]
!   !   Sibling: 6  Call: output [type void] [line: 22]
!   !   !   Child: 0  Op: [ [type int] [line: 22]
!   !   !   !   Child: 0  Id: y is array [ref: Local, size: 14, loc: -5] [type int] [line: 22]
!   !   !   !   Child: 1  Const: 0 [type int] [line: 22]
!   !   Sibling: 7  Call: output [type void] [line: 23]
!   !   !   Child: 0  Op: * [type int] [line: 23]
!   !   !   !   Child: 0  Id: y is array [ref: Local, size: 14, loc: -5] [type int] [line: 23]
!   !   Sibling: 8  Call: outnl [type void] [line: 24]
Sibling: 8  Var: h is array [ref: Global, size: 24, loc: -14] [type bool] [line: 27]
Sibling: 9  Func main [ref: Global, size: -14, loc: 0] [type void] [line: 29]
!   Child: 1  Compound [ref: None, size: -14, loc: 0] [type void] [line: 30]
!   !   Child: 0  Var: m is array [ref: Local, size: 12, loc: -3] [type int] [line: 31]
!   !   Child: 1  Assign: = [type int] [line: 33]
!   !   !   Child: 0  Op: [ [type int] [line: 33]
!   !   !   !   Child: 0  Id: m is array [ref: Local, size: 12, loc: -3] [type int] [line: 33]
!   !   !   !   Child: 1  Const: 0 [type int] [line: 33]
!   !   !   Child: 1  Const: 777 [type int] [line: 33]
!   !   Sibling: 0  Call: output [type void] [line: 34]
!   !   !   Child: 0  Op: [ [type int] [line: 34]
!   !   !   !   Child: 0  Id: m is array [ref: Local, size: 12, loc: -3] [type int] [line: 34]
!   !   !   !   Child: 1  Const: 0 [type int] [line: 34]
!   !   Sibling: 1  Call: output [type void] [line: 35]
!   !   !   Child: 0  Op: * [type int] [line: 35]
!   !   !   !   Child: 0  Id: m is array [ref: Local, size: 12, loc: -3] [type int] [line: 35]
!   !   Sibling: 2  Call: output [type void] [line: 36]
!   !   !   Child: 0  Op: [ [type int] [line: 36]
!   !   !   !   Child: 0  Id: g is array [ref: Global, size: 13, loc: -1] [type int] [line: 36]
!   !   !   !   Child: 1  Const: 0 [type int] [line: 36]
!   !   Sibling: 3  Call: output [type void] [line: 37]
!   !   !   Child: 0  Op: * [type int] [line: 37]
!   !   !   !   Child: 0  Id: g is array [ref: Global, size: 13, loc: -1] [type int] [line: 37]
!   !   Sibling: 4  Call: outnl [type void] [line: 38]
!   !   Sibling: 5  Call: ford [type void] [line: 40]
!   !   !   Child: 0  Id: m is array [ref: Local, size: 12, loc: -3] [type int] [line: 40]
!   !   Sibling: 6  Call: ford [type void] [line: 41]
!   !   !   Child: 0  Id: g is array [ref: Global, size: 13, loc: -1] [type int] [line: 41]
!   !   Sibling: 7  Call: output [type void] [line: 43]
!   !   !   Child: 0  Op: * [type int] [line: 43]
!   !   !   !   Child: 0  Op: * [type int] [line: 43]
!   !   !   !   !   Child: 0  Id: m is array [ref: Local, size: 12, loc: -3] [type int] [line: 43]
!   !   !   !   Child: 1  Op: * [type int] [line: 43]
!   !   !   !   !   Child: 0  Id: g is array [ref: Global, size: 13, loc: -1] [type int] [line: 43]
!   !   Sibling: 8  Call: outnl [type void] [line: 44]
Offset for end of global space: -37
Number of warnings: 0
Number of errors: 0
