ERROR(10): Symbol 'close' is not defined.
ERROR(11): Symbol 'close' is not defined.
ERROR(11): Symbol 'shave' is not defined.
ERROR(13): Symbol 'gromit' is not defined.
ERROR(13): Symbol 'gromit' is not defined.
ERROR(14): Symbol 'gromit' is not defined.
ERROR(15): Symbol 'gromit' is not defined.
ERROR(16): Symbol 'close' is not defined.
ERROR(16): Symbol 'gromit' is not defined.
ERROR(17): Symbol 'shave' is not defined.
ERROR(17): Symbol 'gromit' is not defined.
ERROR(19): Symbol 'a' is not defined.
ERROR(19): Symbol 'grand' is not defined.
ERROR(19): Symbol 'day' is not defined.
ERROR(19): Symbol 'out' is not defined.
ERROR(21): Symbol 'close' is not defined.
ERROR(22): Symbol 'shave' is not defined.
ERROR(23): Symbol 'shave' is not defined.
ERROR(23): Symbol 'close' is not defined.
ERROR(23): Symbol 'shave' is not defined.
ERROR(23): Symbol 'close' is not defined.
ERROR(24): Symbol 'shave' is not defined.
ERROR(24): Symbol 'close' is not defined.
ERROR(24): Symbol 'close' is not defined.
ERROR(24): Symbol 'shave' is not defined.
ERROR(25): Symbol 'close' is not defined.
ERROR(26): Symbol 'shave' is not defined.
ERROR(27): Symbol 'sheep' is not defined.
ERROR(27): Cannot index nonarray 'sheep'.
ERROR(28): Symbol 'sheep' is not defined.
ERROR(28): Cannot index nonarray 'sheep'.
ERROR(29): Symbol 'gromit' is not defined.
ERROR(29): Symbol 'were' is not defined.
ERROR(29): Symbol 'rabbit' is not defined.
ERROR(41): Symbol 'chicken' is not defined.
ERROR(41): Expecting array in parameter 3 of call to 'Wendolene' defined on line 34.
ERROR(41): Symbol 'run' is not defined.
ERROR(41): Expecting array in parameter 4 of call to 'Wendolene' defined on line 34.
ERROR(43): Cannot use function 'wallace' as a variable.
ERROR(43): Cannot index nonarray 'wallace'.
ERROR(43): Symbol 'gromit' is not defined.
ERROR(43): Cannot index nonarray 'gromit'.
ERROR(46): Symbol 'x' is not defined.
ERROR(46): Symbol 'y' is not defined.
ERROR(46): Symbol 'x' is not defined.
ERROR(46): Symbol 'x' is not defined.
ERROR(46): Symbol 'x' is not defined.
ERROR(46): Symbol 'y' is not defined.
ERROR(50): Too many parameters passed for function 'cheese' defined on line 46.
ERROR(50): Symbol 'gromit' is not defined.
WARNING(48): Expecting to return type int but function 'main' has no return statement.
Func input [ref: Global, size: -2, loc: 0] [type int] [line: -1]
Sibling: 0  Func output [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy* [ref: Param, size: 1, loc: -2] [type int] [line: -1]
Sibling: 1  Func inputb [ref: Global, size: -2, loc: 0] [type bool] [line: -1]
Sibling: 2  Func outputb [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy* [ref: Param, size: 1, loc: -2] [type bool] [line: -1]
Sibling: 3  Func inputc [ref: Global, size: -2, loc: 0] [type char] [line: -1]
Sibling: 4  Func outputc [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy* [ref: Param, size: 1, loc: -2] [type char] [line: -1]
Sibling: 5  Func outnl [ref: Global, size: -2, loc: 0] [type void] [line: -1]
Sibling: 6  Func wallace [ref: Global, size: -4, loc: 0] [type void] [line: 8]
!   Child: 0  Param wrong [ref: Param, size: 1, loc: -2] [type int] [line: 8]
!   Sibling: 0  Param trousers [ref: Param, size: 1, loc: -3] [type int] [line: 8]
!   Child: 1  Compound [ref: None, size: -4, loc: 0] [type void] [line: 9]
!   !   Child: 1  Id: close [ref: None, size: 1, loc: 0] [undefined type] [line: 10]
!   !   Sibling: 0  Assign: = [undefined type] [line: 11]
!   !   !   Child: 0  Id: close [ref: None, size: 1, loc: 0] [undefined type] [line: 11]
!   !   !   Child: 1  Id: shave [ref: None, size: 1, loc: 0] [undefined type] [line: 11]
!   !   Sibling: 1  Assign: = [type int] [line: 12]
!   !   !   Child: 0  Id: wrong [ref: Param, size: 1, loc: -2] [type int] [line: 12]
!   !   !   Child: 1  Op: % [type int] [line: 12]
!   !   !   !   Child: 0  Id: trousers [ref: Param, size: 1, loc: -3] [type int] [line: 12]
!   !   !   !   Child: 1  Op: / [type int] [line: 12]
!   !   !   !   !   Child: 0  Const: 666 [type int] [line: 12]
!   !   !   !   !   Child: 1  Id: wrong [ref: Param, size: 1, loc: -2] [type int] [line: 12]
!   !   Sibling: 2  Assign: = [undefined type] [line: 13]
!   !   !   Child: 0  Id: gromit [ref: None, size: 1, loc: 0] [undefined type] [line: 13]
!   !   !   Child: 1  Op: + [type int] [line: 13]
!   !   !   !   Child: 0  Op: - [type int] [line: 13]
!   !   !   !   !   Child: 0  Op: * [type int] [line: 13]
!   !   !   !   !   !   Child: 0  Id: wrong [ref: Param, size: 1, loc: -2] [type int] [line: 13]
!   !   !   !   !   !   Child: 1  Id: trousers [ref: Param, size: 1, loc: -3] [type int] [line: 13]
!   !   !   !   !   Child: 1  Id: gromit [ref: None, size: 1, loc: 0] [undefined type] [line: 13]
!   !   !   !   Child: 1  Op: - [type int] [line: 13]
!   !   !   !   !   Child: 0  Const: 42 [type int] [line: 13]
!   !   Sibling: 3  Assign: += [type int] [line: 14]
!   !   !   Child: 0  Id: gromit [ref: None, size: 1, loc: 0] [undefined type] [line: 14]
!   !   !   Child: 1  Const: 27182818 [type int] [line: 14]
!   !   Sibling: 4  Assign: -= [type int] [line: 15]
!   !   !   Child: 0  Id: gromit [ref: None, size: 1, loc: 0] [undefined type] [line: 15]
!   !   !   Child: 1  Const: 31415927 [type int] [line: 15]
!   !   Sibling: 5  Assign: = [undefined type] [line: 16]
!   !   !   Child: 0  Id: close [ref: None, size: 1, loc: 0] [undefined type] [line: 16]
!   !   !   Child: 1  Op: and [type bool] [line: 16]
!   !   !   !   Child: 0  Op: < [type bool] [line: 16]
!   !   !   !   !   Child: 0  Id: wrong [ref: Param, size: 1, loc: -2] [type int] [line: 16]
!   !   !   !   !   Child: 1  Id: trousers [ref: Param, size: 1, loc: -3] [type int] [line: 16]
!   !   !   !   Child: 1  Op: <= [type bool] [line: 16]
!   !   !   !   !   Child: 0  Id: trousers [ref: Param, size: 1, loc: -3] [type int] [line: 16]
!   !   !   !   !   Child: 1  Id: gromit [ref: None, size: 1, loc: 0] [undefined type] [line: 16]
!   !   Sibling: 6  Assign: = [undefined type] [line: 17]
!   !   !   Child: 0  Id: shave [ref: None, size: 1, loc: 0] [undefined type] [line: 17]
!   !   !   Child: 1  Op: and [type bool] [line: 17]
!   !   !   !   Child: 0  Op: > [type bool] [line: 17]
!   !   !   !   !   Child: 0  Id: wrong [ref: Param, size: 1, loc: -2] [type int] [line: 17]
!   !   !   !   !   Child: 1  Id: trousers [ref: Param, size: 1, loc: -3] [type int] [line: 17]
!   !   !   !   Child: 1  Op: >= [type bool] [line: 17]
!   !   !   !   !   Child: 0  Id: trousers [ref: Param, size: 1, loc: -3] [type int] [line: 17]
!   !   !   !   !   Child: 1  Id: gromit [ref: None, size: 1, loc: 0] [undefined type] [line: 17]
!   !   Sibling: 7  Compound [ref: None, size: -4, loc: 0] [type void] [line: 18]
!   !   !   Child: 1  Assign: = [undefined type] [line: 19]
!   !   !   !   Child: 0  Id: a [ref: None, size: 1, loc: 0] [undefined type] [line: 19]
!   !   !   !   Child: 1  Assign: += [type int] [line: 19]
!   !   !   !   !   Child: 0  Id: grand [ref: None, size: 1, loc: 0] [undefined type] [line: 19]
!   !   !   !   !   Child: 1  Assign: -= [type int] [line: 19]
!   !   !   !   !   !   Child: 0  Id: day [ref: None, size: 1, loc: 0] [undefined type] [line: 19]
!   !   !   !   !   !   Child: 1  Id: out [ref: None, size: 1, loc: 0] [undefined type] [line: 19]
!   !   Sibling: 8  Assign: = [undefined type] [line: 21]
!   !   !   Child: 0  Id: close [ref: None, size: 1, loc: 0] [undefined type] [line: 21]
!   !   !   Child: 1  Op: and [type bool] [line: 21]
!   !   !   !   Child: 0  Op: < [type bool] [line: 21]
!   !   !   !   !   Child: 0  Op: + [type int] [line: 21]
!   !   !   !   !   !   Child: 0  Op: * [type int] [line: 21]
!   !   !   !   !   !   !   Child: 0  Op: - [type int] [line: 21]
!   !   !   !   !   !   !   !   Child: 0  Const: 1 [type int] [line: 21]
!   !   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 21]
!   !   !   !   !   !   Child: 1  Const: 3 [type int] [line: 21]
!   !   !   !   !   Child: 1  Op: * [type int] [line: 21]
!   !   !   !   !   !   Child: 0  Const: 4 [type int] [line: 21]
!   !   !   !   !   !   Child: 1  Const: 5 [type int] [line: 21]
!   !   !   !   Child: 1  Op: > [type bool] [line: 21]
!   !   !   !   !   Child: 0  Op: + [type int] [line: 21]
!   !   !   !   !   !   Child: 0  Const: 6 [type int] [line: 21]
!   !   !   !   !   !   Child: 1  Const: 7 [type int] [line: 21]
!   !   !   !   !   Child: 1  Op: - [type int] [line: 21]
!   !   !   !   !   !   Child: 0  Const: 3 [type int] [line: 21]
!   !   Sibling: 9  Assign: = [undefined type] [line: 22]
!   !   !   Child: 0  Id: shave [ref: None, size: 1, loc: 0] [undefined type] [line: 22]
!   !   !   Child: 1  Op: or [type bool] [line: 22]
!   !   !   !   Child: 0  Const: true [type bool] [line: 22]
!   !   !   !   Child: 1  Op: and [type bool] [line: 22]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 22]
!   !   !   !   !   !   Child: 0  Op: - [type int] [line: 22]
!   !   !   !   !   !   !   Child: 0  Op: * [type int] [line: 22]
!   !   !   !   !   !   !   !   Child: 0  Const: 1 [type int] [line: 22]
!   !   !   !   !   !   !   !   Child: 1  Op: + [type int] [line: 22]
!   !   !   !   !   !   !   !   !   Child: 0  Const: 2 [type int] [line: 22]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 3 [type int] [line: 22]
!   !   !   !   !   !   Child: 1  Op: * [type int] [line: 22]
!   !   !   !   !   !   !   Child: 0  Const: 4 [type int] [line: 22]
!   !   !   !   !   !   !   Child: 1  Const: 5 [type int] [line: 22]
!   !   !   !   !   Child: 1  Op: > [type bool] [line: 22]
!   !   !   !   !   !   Child: 0  Op: + [type int] [line: 22]
!   !   !   !   !   !   !   Child: 0  Const: 6 [type int] [line: 22]
!   !   !   !   !   !   !   Child: 1  Const: 7 [type int] [line: 22]
!   !   !   !   !   !   Child: 1  Op: - [type int] [line: 22]
!   !   !   !   !   !   !   Child: 0  Const: 3 [type int] [line: 22]
!   !   Sibling: 10  If  [type void] [line: 23]
!   !   !   Child: 0  Op: != [type bool] [line: 23]
!   !   !   !   Child: 0  Id: shave [ref: None, size: 1, loc: 0] [undefined type] [line: 23]
!   !   !   !   Child: 1  Id: close [ref: None, size: 1, loc: 0] [undefined type] [line: 23]
!   !   !   Child: 1  Assign: = [undefined type] [line: 23]
!   !   !   !   Child: 0  Id: shave [ref: None, size: 1, loc: 0] [undefined type] [line: 23]
!   !   !   !   Child: 1  Op: not [type bool] [line: 23]
!   !   !   !   !   Child: 0  Id: close [ref: None, size: 1, loc: 0] [undefined type] [line: 23]
!   !   Sibling: 11  If  [type void] [line: 24]
!   !   !   Child: 0  Op: or [type bool] [line: 24]
!   !   !   !   Child: 0  Op: not [type bool] [line: 24]
!   !   !   !   !   Child: 0  Op: == [type bool] [line: 24]
!   !   !   !   !   !   Child: 0  Id: shave [ref: None, size: 1, loc: 0] [undefined type] [line: 24]
!   !   !   !   !   !   Child: 1  Id: close [ref: None, size: 1, loc: 0] [undefined type] [line: 24]
!   !   !   !   Child: 1  Op: not [type bool] [line: 24]
!   !   !   !   !   Child: 0  Id: close [ref: None, size: 1, loc: 0] [undefined type] [line: 24]
!   !   !   Child: 1  Assign: = [undefined type] [line: 24]
!   !   !   !   Child: 0  Id: shave [ref: None, size: 1, loc: 0] [undefined type] [line: 24]
!   !   !   !   Child: 1  Const: true [type bool] [line: 24]
!   !   !   Child: 2  Assign: = [undefined type] [line: 25]
!   !   !   !   Child: 0  Id: close [ref: None, size: 1, loc: 0] [undefined type] [line: 25]
!   !   !   !   Child: 1  Const: false [type bool] [line: 25]
!   !   Sibling: 12  While  [type void] [line: 26]
!   !   !   Child: 0  Id: shave [ref: None, size: 1, loc: 0] [undefined type] [line: 26]
!   !   !   Child: 1  Compound [ref: None, size: -4, loc: 0] [type void] [line: 26]
!   !   !   !   Child: 1  Assign: = [undefined type] [line: 27]
!   !   !   !   !   Child: 0  Op: [ [undefined type] [line: 27]
!   !   !   !   !   !   Child: 0  Id: sheep [ref: None, size: 1, loc: 0] [undefined type] [line: 27]
!   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 27]
!   !   !   !   !   Child: 1  Const: 1618 [type int] [line: 27]
!   !   !   !   Sibling: 0  If  [type void] [line: 28]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 28]
!   !   !   !   !   !   Child: 0  Op: [ [undefined type] [line: 28]
!   !   !   !   !   !   !   Child: 0  Id: sheep [ref: None, size: 1, loc: 0] [undefined type] [line: 28]
!   !   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 28]
!   !   !   !   !   !   Child: 1  Const: 496 [type int] [line: 28]
!   !   !   !   !   Child: 1  Break [type void] [line: 28]
!   !   !   !   Sibling: 1  Call: wallace [type void] [line: 29]
!   !   !   !   !   Child: 0  Id: gromit [ref: None, size: 1, loc: 0] [undefined type] [line: 29]
!   !   !   !   !   Sibling: 0  Op: - [type int] [line: 29]
!   !   !   !   !   !   Child: 0  Id: were [ref: None, size: 1, loc: 0] [undefined type] [line: 29]
!   !   !   !   !   !   Child: 1  Id: rabbit [ref: None, size: 1, loc: 0] [undefined type] [line: 29]
!   !   Sibling: 13  Return [type void] [line: 31]
Sibling: 7  Func Wendolene [ref: Global, size: -6, loc: 0] [type int] [line: 34]
!   Child: 0  Param wool [ref: Param, size: 1, loc: -2] [type int] [line: 34]
!   Sibling: 0  Param shawn [ref: Param, size: 1, loc: -3] [type bool] [line: 34]
!   Sibling: 1  Param yarn is array [ref: Param, size: 1, loc: -4] [type int] [line: 34]
!   Sibling: 2  Param preston is array [ref: Param, size: 1, loc: -5] [type bool] [line: 34]
!   Child: 1  Compound [ref: None, size: -6, loc: 0] [type void] [line: 35]
!   !   Child: 1  Return [type void] [line: 36]
!   !   !   Child: 0  Op: + [type int] [line: 36]
!   !   !   !   Child: 0  Id: wool [ref: Param, size: 1, loc: -2] [type int] [line: 36]
!   !   !   !   Child: 1  Op: [ [type int] [line: 36]
!   !   !   !   !   Child: 0  Id: yarn is array [ref: Param, size: 1, loc: -4] [type int] [line: 36]
!   !   !   !   !   Child: 1  Const: 0 [type int] [line: 36]
Sibling: 8  Func ramsBottom [ref: Global, size: -2, loc: 0] [type bool] [line: 39]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 40]
!   !   Child: 1  Op: * [type int] [line: 41]
!   !   !   Child: 0  Const: 42 [type int] [line: 41]
!   !   !   Child: 1  Call: Wendolene [type int] [line: 41]
!   !   !   !   Child: 0  Op: + [type int] [line: 41]
!   !   !   !   !   Child: 0  Op: + [type int] [line: 41]
!   !   !   !   !   !   Child: 0  Const: 1 [type int] [line: 41]
!   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 41]
!   !   !   !   !   Child: 1  Const: 3 [type int] [line: 41]
!   !   !   !   Sibling: 0  Op: or [type bool] [line: 41]
!   !   !   !   !   Child: 0  Op: not [type bool] [line: 41]
!   !   !   !   !   !   Child: 0  Const: true [type bool] [line: 41]
!   !   !   !   !   Child: 1  Op: and [type bool] [line: 41]
!   !   !   !   !   !   Child: 0  Const: true [type bool] [line: 41]
!   !   !   !   !   !   Child: 1  Const: false [type bool] [line: 41]
!   !   !   !   Sibling: 1  Id: chicken [ref: None, size: 1, loc: 0] [undefined type] [line: 41]
!   !   !   !   Sibling: 2  Id: run [ref: None, size: 1, loc: 0] [undefined type] [line: 41]
!   !   Sibling: 0  Return [type void] [line: 43]
!   !   !   Child: 0  Op: not [type bool] [line: 43]
!   !   !   !   Child: 0  Op: >= [type bool] [line: 43]
!   !   !   !   !   Child: 0  Op: [ [undefined type] [line: 43]
!   !   !   !   !   !   Child: 0  Id: wallace [ref: Global, size: -4, loc: 0] [undefined type] [line: 43]
!   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 43]
!   !   !   !   !   Child: 1  Op: * [type int] [line: 43]
!   !   !   !   !   !   Child: 0  Op: - [type int] [line: 43]
!   !   !   !   !   !   !   Child: 0  Op: [ [undefined type] [line: 43]
!   !   !   !   !   !   !   !   Child: 0  Id: gromit [ref: None, size: 1, loc: 0] [undefined type] [line: 43]
!   !   !   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 43]
!   !   !   !   !   !   Child: 1  Const: 3 [type int] [line: 43]
Sibling: 9  Func cheese [ref: Global, size: -2, loc: 0] [type int] [line: 46]
!   Child: 1  While  [type void] [line: 46]
!   !   Child: 0  Op: > [type bool] [line: 46]
!   !   !   Child: 0  Id: x [ref: None, size: 1, loc: 0] [undefined type] [line: 46]
!   !   !   Child: 1  Const: 0 [type int] [line: 46]
!   !   Child: 1  If  [type void] [line: 46]
!   !   !   Child: 0  Op: > [type bool] [line: 46]
!   !   !   !   Child: 0  Id: y [ref: None, size: 1, loc: 0] [undefined type] [line: 46]
!   !   !   !   Child: 1  Const: 3 [type int] [line: 46]
!   !   !   Child: 1  Assign: -- [type int] [line: 46]
!   !   !   !   Child: 0  Id: x [ref: None, size: 1, loc: 0] [undefined type] [line: 46]
!   !   !   Child: 2  Return [type void] [line: 46]
!   !   !   !   Child: 0  Op: % [type int] [line: 46]
!   !   !   !   !   Child: 0  Op: * [type int] [line: 46]
!   !   !   !   !   !   Child: 0  Id: x [ref: None, size: 1, loc: 0] [undefined type] [line: 46]
!   !   !   !   !   !   Child: 1  Id: x [ref: None, size: 1, loc: 0] [undefined type] [line: 46]
!   !   !   !   !   Child: 1  Id: y [ref: None, size: 1, loc: 0] [undefined type] [line: 46]
Sibling: 10  Func main [ref: Global, size: -2, loc: 0] [type int] [line: 48]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 49]
!   !   Child: 1  Call: wallace [type void] [line: 50]
!   !   !   Child: 0  Call: cheese [type int] [line: 50]
!   !   !   !   Child: 0  Const: 62 [type int] [line: 50]
!   !   !   !   Sibling: 0  Const: 62 [type int] [line: 50]
!   !   !   Sibling: 0  Id: gromit [ref: None, size: 1, loc: 0] [undefined type] [line: 50]
Offset for end of global space: 0
Number of warnings: 1
Number of errors: 50
