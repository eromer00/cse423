WARNING(3): Expecting to return type int but function 'showInt' has no return statement.
WARNING(9): Expecting to return type int but function 'showIntArray' has no return statement.
WARNING(20): Expecting to return type int but function 'showBool' has no return statement.
Func input [ref: Global, size: -2, loc: 0] [type int] [line: -1]
Sibling: 0  Func output [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy* [ref: Param, size: 1, loc: -2] [type int] [line: -1]
Sibling: 1  Func inputb [ref: Global, size: -2, loc: 0] [type bool] [line: -1]
Sibling: 2  Func outputb [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy* [ref: Param, size: 1, loc: -2] [type bool] [line: -1]
Sibling: 3  Func inputc [ref: Global, size: -2, loc: 0] [type char] [line: -1]
Sibling: 4  Func outputc [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy* [ref: Param, size: 1, loc: -2] [type char] [line: -1]
Sibling: 5  Func outnl [ref: Global, size: -2, loc: 0] [type void] [line: -1]
Sibling: 6  Func showInt [ref: Global, size: -3, loc: 0] [type int] [line: 3]
!   Child: 0  Param x [ref: Param, size: 1, loc: -2] [type int] [line: 3]
!   Child: 1  Compound [ref: None, size: -3, loc: 0] [type void] [line: 4]
!   !   Child: 1  Call: output [type void] [line: 5]
!   !   !   Child: 0  Id: x [ref: Param, size: 1, loc: -2] [type int] [line: 5]
!   !   Sibling: 0  Call: outnl [type void] [line: 6]
Sibling: 7  Func showIntArray [ref: Global, size: -5, loc: 0] [type int] [line: 9]
!   Child: 0  Param x is array [ref: Param, size: 1, loc: -2] [type int] [line: 9]
!   Sibling: 0  Param size [ref: Param, size: 1, loc: -3] [type int] [line: 9]
!   Child: 1  Compound [ref: None, size: -5, loc: 0] [type void] [line: 10]
!   !   Child: 0  Var: i [ref: Local, size: 1, loc: -4] [type int] [line: 11]
!   !   Child: 1  Assign: = [type int] [line: 12]
!   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -4] [type int] [line: 12]
!   !   !   Child: 1  Const: 0 [type int] [line: 12]
!   !   Sibling: 0  While  [type void] [line: 13]
!   !   !   Child: 0  Op: < [type bool] [line: 13]
!   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -4] [type int] [line: 13]
!   !   !   !   Child: 1  Id: size [ref: Param, size: 1, loc: -3] [type int] [line: 13]
!   !   !   Child: 1  Compound [ref: None, size: -5, loc: 0] [type void] [line: 13]
!   !   !   !   Child: 1  Call: output [type void] [line: 14]
!   !   !   !   !   Child: 0  Op: [ [type int] [line: 14]
!   !   !   !   !   !   Child: 0  Id: x is array [ref: Param, size: 1, loc: -2] [type int] [line: 14]
!   !   !   !   !   !   Child: 1  Id: i [ref: Local, size: 1, loc: -4] [type int] [line: 14]
!   !   !   !   Sibling: 0  Assign: = [type int] [line: 15]
!   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -4] [type int] [line: 15]
!   !   !   !   !   Child: 1  Op: + [type int] [line: 15]
!   !   !   !   !   !   Child: 0  Id: i [ref: Local, size: 1, loc: -4] [type int] [line: 15]
!   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 15]
!   !   Sibling: 1  Call: outnl [type void] [line: 17]
Sibling: 8  Func showBool [ref: Global, size: -3, loc: 0] [type int] [line: 20]
!   Child: 0  Param x [ref: Param, size: 1, loc: -2] [type bool] [line: 20]
!   Child: 1  Compound [ref: None, size: -3, loc: 0] [type void] [line: 21]
!   !   Child: 1  Call: outputb [type void] [line: 22]
!   !   !   Child: 0  Id: x [ref: Param, size: 1, loc: -2] [type bool] [line: 22]
!   !   Sibling: 0  Call: outnl [type void] [line: 23]
Sibling: 9  Func truth [ref: Global, size: -2, loc: 0] [type bool] [line: 26]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 27]
!   !   Child: 1  Return [type void] [line: 28]
!   !   !   Child: 0  Const: true [type bool] [line: 28]
Sibling: 10  Func magic [ref: Global, size: -2, loc: 0] [type int] [line: 31]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 32]
!   !   Child: 1  Return [type void] [line: 33]
!   !   !   Child: 0  Const: 666 [type int] [line: 33]
Sibling: 11  Func sqr [ref: Global, size: -3, loc: 0] [type int] [line: 36]
!   Child: 0  Param x [ref: Param, size: 1, loc: -2] [type int] [line: 36]
!   Child: 1  Compound [ref: None, size: -3, loc: 0] [type void] [line: 37]
!   !   Child: 1  Return [type void] [line: 38]
!   !   !   Child: 0  Op: * [type int] [line: 38]
!   !   !   !   Child: 0  Id: x [ref: Param, size: 1, loc: -2] [type int] [line: 38]
!   !   !   !   Child: 1  Id: x [ref: Param, size: 1, loc: -2] [type int] [line: 38]
Sibling: 12  Func add [ref: Global, size: -4, loc: 0] [type int] [line: 41]
!   Child: 0  Param x [ref: Param, size: 1, loc: -2] [type int] [line: 41]
!   Sibling: 0  Param y [ref: Param, size: 1, loc: -3] [type int] [line: 41]
!   Child: 1  Compound [ref: None, size: -4, loc: 0] [type void] [line: 42]
!   !   Child: 1  Return [type void] [line: 43]
!   !   !   Child: 0  Op: + [type int] [line: 43]
!   !   !   !   Child: 0  Id: x [ref: Param, size: 1, loc: -2] [type int] [line: 43]
!   !   !   !   Child: 1  Id: y [ref: Param, size: 1, loc: -3] [type int] [line: 43]
Sibling: 13  Func mul [ref: Global, size: -4, loc: 0] [type int] [line: 46]
!   Child: 0  Param x [ref: Param, size: 1, loc: -2] [type int] [line: 46]
!   Sibling: 0  Param y [ref: Param, size: 1, loc: -3] [type int] [line: 46]
!   Child: 1  Compound [ref: None, size: -4, loc: 0] [type void] [line: 47]
!   !   Child: 1  Return [type void] [line: 48]
!   !   !   Child: 0  Op: * [type int] [line: 48]
!   !   !   !   Child: 0  Id: x [ref: Param, size: 1, loc: -2] [type int] [line: 48]
!   !   !   !   Child: 1  Id: y [ref: Param, size: 1, loc: -3] [type int] [line: 48]
Sibling: 14  Var: g [ref: Global, size: 1, loc: 0] [type int] [line: 51]
Sibling: 15  Func caller [ref: Global, size: -6, loc: 0] [type void] [line: 53]
!   Child: 0  Param x [ref: Param, size: 1, loc: -2] [type int] [line: 53]
!   Sibling: 0  Param y is array [ref: Param, size: 1, loc: -3] [type int] [line: 53]
!   Child: 1  Compound [ref: None, size: -6, loc: 0] [type void] [line: 54]
!   !   Child: 0  Var: z [ref: Local, size: 1, loc: -4] [type int] [line: 55]
!   !   Sibling: 0  Var: a [ref: Local, size: 1, loc: -5] [type int] [line: 56]
!   !   Child: 1  Assign: = [type int] [line: 58]
!   !   !   Child: 0  Id: a [ref: Local, size: 1, loc: -5] [type int] [line: 58]
!   !   !   Child: 1  Const: 666 [type int] [line: 58]
!   !   Sibling: 0  Assign: = [type int] [line: 59]
!   !   !   Child: 0  Id: g [ref: Global, size: 1, loc: 0] [type int] [line: 59]
!   !   !   Child: 1  Const: 777 [type int] [line: 59]
!   !   Sibling: 1  Assign: = [type int] [line: 61]
!   !   !   Child: 0  Id: z [ref: Local, size: 1, loc: -4] [type int] [line: 61]
!   !   !   Child: 1  Call: sqr [type int] [line: 61]
!   !   !   !   Child: 0  Id: x [ref: Param, size: 1, loc: -2] [type int] [line: 61]
!   !   Sibling: 2  Call: output [type void] [line: 62]
!   !   !   Child: 0  Id: z [ref: Local, size: 1, loc: -4] [type int] [line: 62]
!   !   Sibling: 3  Call: outnl [type void] [line: 63]
!   !   Sibling: 4  Assign: = [type int] [line: 65]
!   !   !   Child: 0  Id: z [ref: Local, size: 1, loc: -4] [type int] [line: 65]
!   !   !   Child: 1  Call: sqr [type int] [line: 65]
!   !   !   !   Child: 0  Op: [ [type int] [line: 65]
!   !   !   !   !   Child: 0  Id: y is array [ref: Param, size: 1, loc: -3] [type int] [line: 65]
!   !   !   !   !   Child: 1  Const: 7 [type int] [line: 65]
!   !   Sibling: 5  Call: output [type void] [line: 66]
!   !   !   Child: 0  Id: z [ref: Local, size: 1, loc: -4] [type int] [line: 66]
!   !   Sibling: 6  Call: outnl [type void] [line: 67]
!   !   Sibling: 7  Assign: = [type int] [line: 69]
!   !   !   Child: 0  Id: z [ref: Local, size: 1, loc: -4] [type int] [line: 69]
!   !   !   Child: 1  Call: sqr [type int] [line: 69]
!   !   !   !   Child: 0  Id: a [ref: Local, size: 1, loc: -5] [type int] [line: 69]
!   !   Sibling: 8  Call: output [type void] [line: 70]
!   !   !   Child: 0  Id: z [ref: Local, size: 1, loc: -4] [type int] [line: 70]
!   !   Sibling: 9  Call: outnl [type void] [line: 71]
!   !   Sibling: 10  Assign: = [type int] [line: 73]
!   !   !   Child: 0  Id: z [ref: Local, size: 1, loc: -4] [type int] [line: 73]
!   !   !   Child: 1  Call: sqr [type int] [line: 73]
!   !   !   !   Child: 0  Id: g [ref: Global, size: 1, loc: 0] [type int] [line: 73]
!   !   Sibling: 11  Call: output [type void] [line: 74]
!   !   !   Child: 0  Id: z [ref: Local, size: 1, loc: -4] [type int] [line: 74]
!   !   Sibling: 12  Call: outnl [type void] [line: 75]
Sibling: 16  Func swap [ref: Global, size: -6, loc: 0] [type void] [line: 78]
!   Child: 0  Param x is array [ref: Param, size: 1, loc: -2] [type int] [line: 78]
!   Sibling: 0  Param z1 [ref: Param, size: 1, loc: -3] [type int] [line: 78]
!   Sibling: 1  Param z2 [ref: Param, size: 1, loc: -4] [type int] [line: 78]
!   Child: 1  Compound [ref: None, size: -6, loc: 0] [type void] [line: 79]
!   !   Child: 0  Var: tmp [ref: Local, size: 1, loc: -5] [type int] [line: 80]
!   !   Child: 1  Assign: = [type int] [line: 81]
!   !   !   Child: 0  Id: tmp [ref: Local, size: 1, loc: -5] [type int] [line: 81]
!   !   !   Child: 1  Op: [ [type int] [line: 81]
!   !   !   !   Child: 0  Id: x is array [ref: Param, size: 1, loc: -2] [type int] [line: 81]
!   !   !   !   Child: 1  Id: z1 [ref: Param, size: 1, loc: -3] [type int] [line: 81]
!   !   Sibling: 0  Assign: = [type int] [line: 82]
!   !   !   Child: 0  Op: [ [type int] [line: 82]
!   !   !   !   Child: 0  Id: x is array [ref: Param, size: 1, loc: -2] [type int] [line: 82]
!   !   !   !   Child: 1  Id: z1 [ref: Param, size: 1, loc: -3] [type int] [line: 82]
!   !   !   Child: 1  Op: [ [type int] [line: 82]
!   !   !   !   Child: 0  Id: x is array [ref: Param, size: 1, loc: -2] [type int] [line: 82]
!   !   !   !   Child: 1  Id: z2 [ref: Param, size: 1, loc: -4] [type int] [line: 82]
!   !   Sibling: 1  Assign: = [type int] [line: 83]
!   !   !   Child: 0  Op: [ [type int] [line: 83]
!   !   !   !   Child: 0  Id: x is array [ref: Param, size: 1, loc: -2] [type int] [line: 83]
!   !   !   !   Child: 1  Id: z2 [ref: Param, size: 1, loc: -4] [type int] [line: 83]
!   !   !   Child: 1  Id: tmp [ref: Local, size: 1, loc: -5] [type int] [line: 83]
Sibling: 17  Func main [ref: Global, size: -26, loc: 0] [type void] [line: 86]
!   Child: 1  Compound [ref: None, size: -26, loc: 0] [type void] [line: 87]
!   !   Child: 0  Var: p [ref: Local, size: 1, loc: -2] [type int] [line: 88]
!   !   Sibling: 0  Var: q [ref: Local, size: 1, loc: -3] [type int] [line: 88]
!   !   Sibling: 1  Var: r is array [ref: Local, size: 11, loc: -5] [type int] [line: 88]
!   !   Sibling: 2  Var: s is array [ref: Local, size: 11, loc: -16] [type int] [line: 88]
!   !   Child: 1  Assign: = [type int] [line: 90]
!   !   !   Child: 0  Id: p [ref: Local, size: 1, loc: -2] [type int] [line: 90]
!   !   !   Child: 1  Const: 0 [type int] [line: 90]
!   !   Sibling: 0  While  [type void] [line: 91]
!   !   !   Child: 0  Op: < [type bool] [line: 91]
!   !   !   !   Child: 0  Id: p [ref: Local, size: 1, loc: -2] [type int] [line: 91]
!   !   !   !   Child: 1  Const: 10 [type int] [line: 91]
!   !   !   Child: 1  Compound [ref: None, size: -26, loc: 0] [type void] [line: 91]
!   !   !   !   Child: 1  Assign: = [type int] [line: 92]
!   !   !   !   !   Child: 0  Op: [ [type int] [line: 92]
!   !   !   !   !   !   Child: 0  Id: r is array [ref: Local, size: 11, loc: -5] [type int] [line: 92]
!   !   !   !   !   !   Child: 1  Id: p [ref: Local, size: 1, loc: -2] [type int] [line: 92]
!   !   !   !   !   Child: 1  Id: p [ref: Local, size: 1, loc: -2] [type int] [line: 92]
!   !   !   !   Sibling: 0  Assign: ++ [type int] [line: 93]
!   !   !   !   !   Child: 0  Id: p [ref: Local, size: 1, loc: -2] [type int] [line: 93]
!   !   Sibling: 1  Assign: = [type int] [line: 96]
!   !   !   Child: 0  Id: p [ref: Local, size: 1, loc: -2] [type int] [line: 96]
!   !   !   Child: 1  Const: 111 [type int] [line: 96]
!   !   Sibling: 2  Assign: = [type int] [line: 97]
!   !   !   Child: 0  Id: q [ref: Local, size: 1, loc: -3] [type int] [line: 97]
!   !   !   Child: 1  Const: 222 [type int] [line: 97]
!   !   Sibling: 3  Assign: = [type int] [line: 98]
!   !   !   Child: 0  Op: [ [type int] [line: 98]
!   !   !   !   Child: 0  Id: r is array [ref: Local, size: 11, loc: -5] [type int] [line: 98]
!   !   !   !   Child: 1  Const: 7 [type int] [line: 98]
!   !   !   Child: 1  Const: 333 [type int] [line: 98]
!   !   Sibling: 4  Assign: = [type int] [line: 99]
!   !   !   Child: 0  Op: [ [type int] [line: 99]
!   !   !   !   Child: 0  Id: s is array [ref: Local, size: 11, loc: -16] [type int] [line: 99]
!   !   !   !   Child: 1  Const: 7 [type int] [line: 99]
!   !   !   Child: 1  Const: 444 [type int] [line: 99]
!   !   Sibling: 5  Call: showInt [type int] [line: 101]
!   !   !   Child: 0  Id: p [ref: Local, size: 1, loc: -2] [type int] [line: 101]
!   !   Sibling: 6  Call: showIntArray [type int] [line: 103]
!   !   !   Child: 0  Id: r is array [ref: Local, size: 11, loc: -5] [type int] [line: 103]
!   !   !   Sibling: 0  Const: 10 [type int] [line: 103]
!   !   Sibling: 7  Call: showBool [type int] [line: 105]
!   !   !   Child: 0  Call: truth [type bool] [line: 105]
!   !   Sibling: 8  Call: output [type void] [line: 107]
!   !   !   Child: 0  Call: showInt [type int] [line: 107]
!   !   !   !   Child: 0  Id: p [ref: Local, size: 1, loc: -2] [type int] [line: 107]
!   !   Sibling: 9  Call: output [type void] [line: 108]
!   !   !   Child: 0  Call: showBool [type int] [line: 108]
!   !   !   !   Child: 0  Call: truth [type bool] [line: 108]
!   !   Sibling: 10  Call: caller [type void] [line: 110]
!   !   !   Child: 0  Id: p [ref: Local, size: 1, loc: -2] [type int] [line: 110]
!   !   !   Sibling: 0  Id: r is array [ref: Local, size: 11, loc: -5] [type int] [line: 110]
!   !   Sibling: 11  Call: output [type void] [line: 112]
!   !   !   Child: 0  Call: add [type int] [line: 112]
!   !   !   !   Child: 0  Call: add [type int] [line: 112]
!   !   !   !   !   Child: 0  Id: p [ref: Local, size: 1, loc: -2] [type int] [line: 112]
!   !   !   !   !   Sibling: 0  Id: q [ref: Local, size: 1, loc: -3] [type int] [line: 112]
!   !   !   !   Sibling: 0  Call: mul [type int] [line: 112]
!   !   !   !   !   Child: 0  Id: p [ref: Local, size: 1, loc: -2] [type int] [line: 112]
!   !   !   !   !   Sibling: 0  Id: q [ref: Local, size: 1, loc: -3] [type int] [line: 112]
!   !   Sibling: 12  Call: outnl [type void] [line: 113]
!   !   Sibling: 13  Assign: = [type int] [line: 114]
!   !   !   Child: 0  Op: [ [type int] [line: 114]
!   !   !   !   Child: 0  Id: r is array [ref: Local, size: 11, loc: -5] [type int] [line: 114]
!   !   !   !   Child: 1  Const: 9 [type int] [line: 114]
!   !   !   Child: 1  Const: 555 [type int] [line: 114]
!   !   Sibling: 14  Call: swap [type void] [line: 115]
!   !   !   Child: 0  Id: r is array [ref: Local, size: 11, loc: -5] [type int] [line: 115]
!   !   !   Sibling: 0  Const: 7 [type int] [line: 115]
!   !   !   Sibling: 1  Const: 9 [type int] [line: 115]
!   !   Sibling: 15  Call: output [type void] [line: 116]
!   !   !   Child: 0  Op: [ [type int] [line: 116]
!   !   !   !   Child: 0  Id: r is array [ref: Local, size: 11, loc: -5] [type int] [line: 116]
!   !   !   !   Child: 1  Const: 9 [type int] [line: 116]
!   !   Sibling: 16  Call: outnl [type void] [line: 117]
!   !   Sibling: 17  Call: output [type void] [line: 118]
!   !   !   Child: 0  Op: * [type int] [line: 118]
!   !   !   !   Child: 0  Const: 2 [type int] [line: 118]
!   !   !   !   Child: 1  Call: add [type int] [line: 118]
!   !   !   !   !   Child: 0  Op: * [type int] [line: 118]
!   !   !   !   !   !   Child: 0  Call: add [type int] [line: 118]
!   !   !   !   !   !   !   Child: 0  Op: * [type int] [line: 118]
!   !   !   !   !   !   !   !   Child: 0  Const: 3 [type int] [line: 118]
!   !   !   !   !   !   !   !   Child: 1  Const: 4 [type int] [line: 118]
!   !   !   !   !   !   !   Sibling: 0  Op: * [type int] [line: 118]
!   !   !   !   !   !   !   !   Child: 0  Const: 5 [type int] [line: 118]
!   !   !   !   !   !   !   !   Child: 1  Const: 6 [type int] [line: 118]
!   !   !   !   !   !   Child: 1  Const: 7 [type int] [line: 118]
!   !   !   !   !   Sibling: 0  Op: * [type int] [line: 118]
!   !   !   !   !   !   Child: 0  Call: add [type int] [line: 118]
!   !   !   !   !   !   !   Child: 0  Op: * [type int] [line: 118]
!   !   !   !   !   !   !   !   Child: 0  Const: 9 [type int] [line: 118]
!   !   !   !   !   !   !   !   Child: 1  Const: 10 [type int] [line: 118]
!   !   !   !   !   !   !   Sibling: 0  Op: * [type int] [line: 118]
!   !   !   !   !   !   !   !   Child: 0  Const: 11 [type int] [line: 118]
!   !   !   !   !   !   !   !   Child: 1  Const: 12 [type int] [line: 118]
!   !   !   !   !   !   Child: 1  Const: 13 [type int] [line: 118]
!   !   Sibling: 18  Call: outnl [type void] [line: 119]
Offset for end of global space: -1
Number of warnings: 3
Number of errors: 0
