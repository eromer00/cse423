WARNING(10): Expecting to return type int but function 'intfunc' has no return statement.
WARNING(14): Expecting to return type bool but function 'boolfunc' has no return statement.
ERROR(29): Function 't1' at line 27 is expecting to return type bool but instead returns type int.
ERROR(29): Cannot return an array.
ERROR(34): Expecting Boolean test condition in if statement but got type int.
ERROR(34): Cannot use array as test condition in if statement.
ERROR(35): Expecting Boolean test condition in if statement but got type int.
ERROR(38): Expecting Boolean test condition in while statement but got type int.
ERROR(38): Cannot use array as test condition in while statement.
ERROR(39): Expecting Boolean test condition in while statement but got type int.
ERROR(45): Array index is the unindexed array 'arr'.
ERROR(56): Expecting array in parameter 1 of call to 'foo1' defined on line 48.
ERROR(56): Not expecting array in parameter 2 of call to 'foo1' defined on line 48.
WARNING(52): Expecting to return type int but function 't4' has no return statement.
ERROR(63): '=' requires that either both or neither operands be arrays.
ERROR(64): '=' requires that either both or neither operands be arrays.
ERROR(66): The operation '+' does not work with arrays.
ERROR(84): Too few parameters passed for function 'foo2' defined on line 70.
ERROR(85): Too few parameters passed for function 'foo2' defined on line 70.
ERROR(86): Expecting type bool in parameter 1 of call to 'foo2' defined on line 70 but got type int.
ERROR(86): Too few parameters passed for function 'foo2' defined on line 70.
ERROR(87): Expecting type bool in parameter 1 of call to 'foo2' defined on line 70 but got type int.
ERROR(87): Expecting type int in parameter 2 of call to 'foo2' defined on line 70 but got type bool.
ERROR(88): Too many parameters passed for function 'foo2' defined on line 70.
ERROR(91): Too many parameters passed for function 'foo4' defined on line 78.
ERROR(98): Function 't8' at line 96 is expecting no return value, but return has return value.
ERROR(98): Cannot return an array.
ERROR(103): Function 't9' at line 101 is expecting no return value, but return has return value.
ERROR(108): Function 't10' at line 106 is expecting to return type int but return has no return value.
ERROR(113): Function 't11' at line 111 is expecting to return type int but instead returns type bool.
ERROR(118): Function 't12' at line 116 is expecting to return type bool but instead returns type int.
ERROR(123): Function 't14' at line 121 is expecting no return value, but return has return value.
ERROR(138): '+' requires operands of type int but lhs is of type bool.
ERROR(138): '+' requires operands of type int but rhs is of type bool.
ERROR(138): '*' requires operands of type int but lhs is of type bool.
ERROR(138): '*' requires operands of type int but rhs is of type bool.
ERROR(138): '/' requires operands of type int but lhs is of type bool.
ERROR(138): '/' requires operands of type int but rhs is of type bool.
ERROR(138): '%' requires operands of type int but lhs is of type bool.
ERROR(138): '%' requires operands of type int but rhs is of type bool.
ERROR(139): '+' requires operands of type int but rhs is of type bool.
ERROR(139): '*' requires operands of type int but rhs is of type bool.
ERROR(139): '/' requires operands of type int but rhs is of type bool.
ERROR(139): '%' requires operands of type int but rhs is of type bool.
ERROR(140): '+' requires operands of type int but lhs is of type bool.
ERROR(140): '*' requires operands of type int but lhs is of type bool.
ERROR(140): '/' requires operands of type int but lhs is of type bool.
ERROR(140): '%' requires operands of type int but lhs is of type bool.
ERROR(143): '<' requires operands of type char or type int but lhs is of type bool.
ERROR(143): '<' requires operands of type char or type int but rhs is of type bool.
ERROR(143): '<=' requires operands of type char or type int but lhs is of type bool.
ERROR(143): '<=' requires operands of type char or type int but rhs is of type bool.
ERROR(143): '>' requires operands of type char or type int but lhs is of type bool.
ERROR(143): '>' requires operands of type char or type int but rhs is of type bool.
ERROR(143): '>=' requires operands of type char or type int but lhs is of type bool.
ERROR(143): '>=' requires operands of type char or type int but rhs is of type bool.
ERROR(144): '<' requires operands of type char or type int but rhs is of type bool.
ERROR(144): '<=' requires operands of type char or type int but rhs is of type bool.
ERROR(144): '>' requires operands of type char or type int but rhs is of type bool.
ERROR(144): '>=' requires operands of type char or type int but rhs is of type bool.
ERROR(145): '<' requires operands of type char or type int but lhs is of type bool.
ERROR(145): '<=' requires operands of type char or type int but lhs is of type bool.
ERROR(145): '>' requires operands of type char or type int but lhs is of type bool.
ERROR(145): '>=' requires operands of type char or type int but lhs is of type bool.
ERROR(149): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(150): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(151): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(153): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(154): '=' requires operands of NONVOID but rhs is of type void.
ERROR(157): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(158): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(161): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(163): '=' requires operands of NONVOID but rhs is of type void.
ERROR(168): Unary 'not' requires an operand of type bool but was given type int.
ERROR(169): Unary 'not' requires an operand of type bool but was given type int.
ERROR(170): Unary 'not' requires an operand of type bool but was given type int.
ERROR(171): Unary '-' requires an operand of type int but was given type bool.
ERROR(172): Unary '-' requires an operand of type int but was given type bool.
ERROR(173): Unary '-' requires an operand of type int but was given type bool.
ERROR(178): 'or' requires operands of type bool but lhs is of type int.
ERROR(178): 'or' requires operands of type bool but rhs is of type int.
ERROR(179): 'or' requires operands of type bool but rhs is of type int.
ERROR(180): 'or' requires operands of type bool but lhs is of type int.
ERROR(183): 'and' requires operands of type bool but lhs is of type int.
ERROR(183): 'and' requires operands of type bool but rhs is of type int.
ERROR(184): 'and' requires operands of type bool but rhs is of type int.
ERROR(185): 'and' requires operands of type bool but lhs is of type int.
ERROR(192): Expecting Boolean test condition in if statement but got type int.
ERROR(194): Expecting Boolean test condition in if statement but got type int.
ERROR(195): Expecting Boolean test condition in if statement but got type void.
ERROR(198): Expecting Boolean test condition in while statement but got type int.
ERROR(200): Expecting Boolean test condition in while statement but got type int.
ERROR(201): Expecting Boolean test condition in while statement but got type void.
ERROR(206): Symbol 'a' is already defined at line 206.
WARNING(206): Expecting to return type int but function 't18' has no return statement.
WARNING(210): Expecting to return type int but function 't19' has no return statement.
ERROR(214): Symbol 't19' is already defined at line 210.
WARNING(214): Expecting to return type int but function 't19' has no return statement.
WARNING(219): Expecting to return type int but function 't20' has no return statement.
ERROR(226): Symbol 'a2' is already defined at line 224.
WARNING(224): Expecting to return type int but function 't21' has no return statement.
WARNING(230): Expecting to return type int but function 't22' has no return statement.
ERROR(240): Symbol 'a4' is already defined at line 239.
WARNING(237): Expecting to return type int but function 't23' has no return statement.
WARNING(243): Expecting to return type int but function 't24' has no return statement.
WARNING(252): Expecting to return type int but function 't25' has no return statement.
ERROR(261): Symbol 'a7' is already defined at line 260.
ERROR(264): Symbol 'a8' is already defined at line 263.
ERROR(271): Symbol 'a9' is already defined at line 268.
ERROR(276): Function 'zzz' is not defined.
ERROR(284): Symbol 'x' is not defined.
ERROR(288): Symbol 't27' is already defined at line 279.
ERROR(305): Symbol 'x4' is not defined.
ERROR(310): Symbol 'x3' is not defined.
ERROR(311): Symbol 'x4' is not defined.
ERROR(326): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(343): Function 'f2' is not defined.
ERROR(357): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(371): 'bar4' is a simple variable and cannot be called.
ERROR(373): Cannot use function 'bar4' as a variable.
ERROR(382): Cannot index nonarray 'y'.
ERROR(383): Cannot index nonarray 'i'.
ERROR(384): Cannot index nonarray 'b'.
ERROR(384): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(385): Cannot use function 'bar4' as a variable.
ERROR(385): Cannot index nonarray 'bar4'.
ERROR(386): '=' requires that either both or neither operands be arrays.
ERROR(391): Unary 'not' requires an operand of type bool but was given type int.
ERROR(391): The operation 'not' does not work with arrays.
ERROR(392): Unary 'not' requires an operand of type bool but was given type int.
ERROR(394): Array 'z' should be indexed by type int but got type bool.
ERROR(395): Array 'z' should be indexed by type int but got type void.
ERROR(396): Array index is the unindexed array 'z'.
ERROR(397): Array index is the unindexed array 'arr'.
ERROR(398): Cannot use function 'intfunc' as a variable.
ERROR(405): Symbol 'y' is not defined.
ERROR(406): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(407): Symbol 'y' is not defined.
WARNING(403): Expecting to return type int but function 't31' has no return statement.
ERROR(LINKER): Procedure main is not defined.
Func input [ref: Global, size: -2, loc: 0] [type int] [line: -1]
Sibling: 0  Func output [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy* [ref: Param, size: 1, loc: -2] [type int] [line: -1]
Sibling: 1  Func inputb [ref: Global, size: -2, loc: 0] [type bool] [line: -1]
Sibling: 2  Func outputb [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy* [ref: Param, size: 1, loc: -2] [type bool] [line: -1]
Sibling: 3  Func inputc [ref: Global, size: -2, loc: 0] [type char] [line: -1]
Sibling: 4  Func outputc [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy* [ref: Param, size: 1, loc: -2] [type char] [line: -1]
Sibling: 5  Func outnl [ref: Global, size: -2, loc: 0] [type void] [line: -1]
Sibling: 6  Var: b [ref: Global, size: 1, loc: 0] [type bool] [line: 5]
Sibling: 7  Var: i [ref: Global, size: 1, loc: -1] [type int] [line: 6]
Sibling: 8  Var: v [ref: Global, size: 1, loc: -2] [type int] [line: 7]
Sibling: 9  Var: arr is array [ref: Global, size: 11, loc: -4] [type int] [line: 8]
Sibling: 10  Func intfunc [ref: Global, size: -2, loc: 0] [type int] [line: 10]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 11]
Sibling: 11  Func boolfunc [ref: Global, size: -2, loc: 0] [type bool] [line: 14]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 15]
Sibling: 12  Func func [ref: Global, size: -2, loc: 0] [type void] [line: 18]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 19]
Sibling: 13  Func lots [ref: Global, size: -42, loc: 0] [type void] [line: 22]
!   Child: 0  Param a1 [ref: Param, size: 1, loc: -2] [type int] [line: 22]
!   Sibling: 0  Param a2 [ref: Param, size: 1, loc: -3] [type int] [line: 22]
!   Sibling: 1  Param a3 [ref: Param, size: 1, loc: -4] [type int] [line: 22]
!   Sibling: 2  Param a4 [ref: Param, size: 1, loc: -5] [type int] [line: 22]
!   Sibling: 3  Param a5 [ref: Param, size: 1, loc: -6] [type int] [line: 22]
!   Sibling: 4  Param a6 [ref: Param, size: 1, loc: -7] [type int] [line: 22]
!   Sibling: 5  Param a7 [ref: Param, size: 1, loc: -8] [type int] [line: 22]
!   Sibling: 6  Param a8 [ref: Param, size: 1, loc: -9] [type int] [line: 22]
!   Sibling: 7  Param a9 [ref: Param, size: 1, loc: -10] [type int] [line: 22]
!   Sibling: 8  Param a10 [ref: Param, size: 1, loc: -11] [type int] [line: 22]
!   Sibling: 9  Param a11 [ref: Param, size: 1, loc: -12] [type int] [line: 22]
!   Sibling: 10  Param a12 [ref: Param, size: 1, loc: -13] [type int] [line: 22]
!   Sibling: 11  Param a13 [ref: Param, size: 1, loc: -14] [type int] [line: 22]
!   Sibling: 12  Param a14 [ref: Param, size: 1, loc: -15] [type int] [line: 22]
!   Sibling: 13  Param a15 [ref: Param, size: 1, loc: -16] [type int] [line: 22]
!   Sibling: 14  Param a16 [ref: Param, size: 1, loc: -17] [type int] [line: 22]
!   Sibling: 15  Param a17 [ref: Param, size: 1, loc: -18] [type int] [line: 22]
!   Sibling: 16  Param a18 [ref: Param, size: 1, loc: -19] [type int] [line: 22]
!   Sibling: 17  Param a19 [ref: Param, size: 1, loc: -20] [type int] [line: 22]
!   Sibling: 18  Param a20 [ref: Param, size: 1, loc: -21] [type int] [line: 22]
!   Sibling: 19  Param a21 [ref: Param, size: 1, loc: -22] [type int] [line: 22]
!   Sibling: 20  Param a22 [ref: Param, size: 1, loc: -23] [type int] [line: 22]
!   Sibling: 21  Param a23 [ref: Param, size: 1, loc: -24] [type int] [line: 22]
!   Sibling: 22  Param a24 [ref: Param, size: 1, loc: -25] [type int] [line: 22]
!   Sibling: 23  Param a25 [ref: Param, size: 1, loc: -26] [type int] [line: 22]
!   Sibling: 24  Param a26 [ref: Param, size: 1, loc: -27] [type int] [line: 22]
!   Sibling: 25  Param a27 [ref: Param, size: 1, loc: -28] [type int] [line: 22]
!   Sibling: 26  Param a28 [ref: Param, size: 1, loc: -29] [type int] [line: 22]
!   Sibling: 27  Param a29 [ref: Param, size: 1, loc: -30] [type int] [line: 22]
!   Sibling: 28  Param a30 [ref: Param, size: 1, loc: -31] [type int] [line: 22]
!   Sibling: 29  Param a31 [ref: Param, size: 1, loc: -32] [type int] [line: 22]
!   Sibling: 30  Param a32 [ref: Param, size: 1, loc: -33] [type int] [line: 22]
!   Sibling: 31  Param a33 [ref: Param, size: 1, loc: -34] [type int] [line: 22]
!   Sibling: 32  Param a34 [ref: Param, size: 1, loc: -35] [type int] [line: 22]
!   Sibling: 33  Param a35 [ref: Param, size: 1, loc: -36] [type int] [line: 22]
!   Sibling: 34  Param a36 [ref: Param, size: 1, loc: -37] [type int] [line: 22]
!   Sibling: 35  Param a37 [ref: Param, size: 1, loc: -38] [type int] [line: 22]
!   Sibling: 36  Param a38 [ref: Param, size: 1, loc: -39] [type int] [line: 22]
!   Sibling: 37  Param a39 [ref: Param, size: 1, loc: -40] [type int] [line: 22]
!   Sibling: 38  Param a40 [ref: Param, size: 1, loc: -41] [type int] [line: 22]
!   Child: 1  Compound [ref: None, size: -42, loc: 0] [type void] [line: 23]
Sibling: 14  Func t1 [ref: Global, size: -2, loc: 0] [type bool] [line: 27]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 28]
!   !   Child: 1  Return [type void] [line: 29]
!   !   !   Child: 0  Id: arr is array [ref: Global, size: 11, loc: -4] [type int] [line: 29]
Sibling: 15  Func t2 [ref: Global, size: -2, loc: 0] [type void] [line: 32]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 33]
!   !   Child: 1  If  [type void] [line: 34]
!   !   !   Child: 0  Id: arr is array [ref: Global, size: 11, loc: -4] [type int] [line: 34]
!   !   !   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 34]
!   !   Sibling: 0  If  [type void] [line: 35]
!   !   !   Child: 0  Op: [ [type int] [line: 35]
!   !   !   !   Child: 0  Id: arr is array [ref: Global, size: 11, loc: -4] [type int] [line: 35]
!   !   !   !   Child: 1  Const: 1 [type int] [line: 35]
!   !   !   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 35]
!   !   Sibling: 1  If  [type void] [line: 36]
!   !   !   Child: 0  Op: == [type bool] [line: 36]
!   !   !   !   Child: 0  Op: [ [type int] [line: 36]
!   !   !   !   !   Child: 0  Id: arr is array [ref: Global, size: 11, loc: -4] [type int] [line: 36]
!   !   !   !   !   Child: 1  Const: 1 [type int] [line: 36]
!   !   !   !   Child: 1  Const: 1 [type int] [line: 36]
!   !   !   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 36]
!   !   Sibling: 2  While  [type void] [line: 38]
!   !   !   Child: 0  Id: arr is array [ref: Global, size: 11, loc: -4] [type int] [line: 38]
!   !   !   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 38]
!   !   Sibling: 3  While  [type void] [line: 39]
!   !   !   Child: 0  Op: [ [type int] [line: 39]
!   !   !   !   Child: 0  Id: arr is array [ref: Global, size: 11, loc: -4] [type int] [line: 39]
!   !   !   !   Child: 1  Const: 1 [type int] [line: 39]
!   !   !   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 39]
!   !   Sibling: 4  While  [type void] [line: 40]
!   !   !   Child: 0  Op: == [type bool] [line: 40]
!   !   !   !   Child: 0  Op: [ [type int] [line: 40]
!   !   !   !   !   Child: 0  Id: arr is array [ref: Global, size: 11, loc: -4] [type int] [line: 40]
!   !   !   !   !   Child: 1  Const: 1 [type int] [line: 40]
!   !   !   !   Child: 1  Const: 1 [type int] [line: 40]
!   !   !   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 40]
Sibling: 16  Func t3 [ref: Global, size: -2, loc: 0] [type int] [line: 43]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 44]
!   !   Child: 1  Return [type void] [line: 45]
!   !   !   Child: 0  Op: [ [type int] [line: 45]
!   !   !   !   Child: 0  Id: arr is array [ref: Global, size: 11, loc: -4] [type int] [line: 45]
!   !   !   !   Child: 1  Id: arr is array [ref: Global, size: 11, loc: -4] [type int] [line: 45]
Sibling: 17  Func foo1 [ref: Global, size: -4, loc: 0] [type void] [line: 48]
!   Child: 0  Param a1 is array [ref: Param, size: 1, loc: -2] [type int] [line: 48]
!   Sibling: 0  Param a2 [ref: Param, size: 1, loc: -3] [type int] [line: 48]
!   Child: 1  Compound [ref: None, size: -4, loc: 0] [type void] [line: 49]
Sibling: 18  Func t4 [ref: Global, size: -2, loc: 0] [type int] [line: 52]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 53]
!   !   Child: 1  Call: foo1 [type void] [line: 56]
!   !   !   Child: 0  Const: 1 [type int] [line: 56]
!   !   !   Sibling: 0  Id: arr is array [ref: Global, size: 11, loc: -4] [type int] [line: 56]
Sibling: 19  Func t5 [ref: Global, size: -3, loc: 0] [type void] [line: 59]
!   Child: 1  Compound [ref: None, size: -3, loc: 0] [type void] [line: 60]
!   !   Child: 0  Var: x [ref: Local, size: 1, loc: -2] [type int] [line: 61]
!   !   Child: 1  Assign: = [type int] [line: 63]
!   !   !   Child: 0  Id: x [ref: Local, size: 1, loc: -2] [type int] [line: 63]
!   !   !   Child: 1  Id: arr is array [ref: Global, size: 11, loc: -4] [type int] [line: 63]
!   !   Sibling: 0  Assign: = [type int] [line: 64]
!   !   !   Child: 0  Id: arr is array [ref: Global, size: 11, loc: -4] [type int] [line: 64]
!   !   !   Child: 1  Const: 1 [type int] [line: 64]
!   !   Sibling: 1  Assign: = [type int] [line: 66]
!   !   !   Child: 0  Id: x [ref: Local, size: 1, loc: -2] [type int] [line: 66]
!   !   !   Child: 1  Op: + [type int] [line: 66]
!   !   !   !   Child: 0  Id: x [ref: Local, size: 1, loc: -2] [type int] [line: 66]
!   !   !   !   Child: 1  Id: arr is array [ref: Global, size: 11, loc: -4] [type int] [line: 66]
Sibling: 20  Func foo2 [ref: Global, size: -4, loc: 0] [type void] [line: 70]
!   Child: 0  Param b [ref: Param, size: 1, loc: -2] [type bool] [line: 70]
!   Sibling: 0  Param i [ref: Param, size: 1, loc: -3] [type int] [line: 70]
!   Child: 1  Compound [ref: None, size: -4, loc: 0] [type void] [line: 71]
Sibling: 21  Func foo3 [ref: Global, size: -3, loc: 0] [type void] [line: 74]
!   Child: 0  Param x [ref: Param, size: 1, loc: -2] [type int] [line: 74]
!   Child: 1  Compound [ref: None, size: -3, loc: 0] [type void] [line: 75]
Sibling: 22  Func foo4 [ref: Global, size: -2, loc: 0] [type void] [line: 78]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 79]
Sibling: 23  Func t7 [ref: Global, size: -2, loc: 0] [type void] [line: 82]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 83]
!   !   Child: 1  Call: foo2 [type void] [line: 84]
!   !   Sibling: 0  Call: foo2 [type void] [line: 85]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 85]
!   !   Sibling: 1  Call: foo2 [type void] [line: 86]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 86]
!   !   Sibling: 2  Call: foo2 [type void] [line: 87]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 87]
!   !   !   Sibling: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 87]
!   !   Sibling: 3  Call: foo2 [type void] [line: 88]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 88]
!   !   !   Sibling: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 88]
!   !   !   Sibling: 1  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 88]
!   !   Sibling: 4  Call: foo4 [type void] [line: 90]
!   !   Sibling: 5  Call: foo4 [type void] [line: 91]
!   !   !   Child: 0  Call: foo3 [type void] [line: 91]
!   !   !   !   Child: 0  Const: 3 [type int] [line: 91]
Sibling: 24  Func t8 [ref: Global, size: -2, loc: 0] [type void] [line: 96]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 97]
!   !   Child: 1  Return [type void] [line: 98]
!   !   !   Child: 0  Id: arr is array [ref: Global, size: 11, loc: -4] [type int] [line: 98]
Sibling: 25  Func t9 [ref: Global, size: -2, loc: 0] [type void] [line: 101]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 102]
!   !   Child: 1  Return [type void] [line: 103]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 103]
Sibling: 26  Func t10 [ref: Global, size: -2, loc: 0] [type int] [line: 106]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 107]
!   !   Child: 1  Return [type void] [line: 108]
Sibling: 27  Func t11 [ref: Global, size: -2, loc: 0] [type int] [line: 111]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 112]
!   !   Child: 1  Return [type void] [line: 113]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 113]
Sibling: 28  Func t12 [ref: Global, size: -2, loc: 0] [type bool] [line: 116]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 117]
!   !   Child: 1  Return [type void] [line: 118]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 118]
Sibling: 29  Func t14 [ref: Global, size: -2, loc: 0] [type void] [line: 121]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 122]
!   !   Child: 1  Return [type void] [line: 123]
!   !   !   Child: 0  Call: foo4 [type void] [line: 123]
Sibling: 30  Func t15 [ref: Global, size: -2, loc: 0] [type void] [line: 126]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 127]
!   !   Child: 1  Return [type void] [line: 128]
Sibling: 31  Func t16 [ref: Global, size: -2, loc: 0] [type void] [line: 135]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 136]
!   !   Child: 1  Op: + [type int] [line: 137]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 137]
!   !   !   Child: 1  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 137]
!   !   Sibling: 0  Op: * [type int] [line: 137]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 137]
!   !   !   Child: 1  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 137]
!   !   Sibling: 1  Op: / [type int] [line: 137]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 137]
!   !   !   Child: 1  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 137]
!   !   Sibling: 2  Op: % [type int] [line: 137]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 137]
!   !   !   Child: 1  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 137]
!   !   Sibling: 3  Op: + [type int] [line: 138]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 138]
!   !   !   Child: 1  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 138]
!   !   Sibling: 4  Op: * [type int] [line: 138]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 138]
!   !   !   Child: 1  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 138]
!   !   Sibling: 5  Op: / [type int] [line: 138]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 138]
!   !   !   Child: 1  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 138]
!   !   Sibling: 6  Op: % [type int] [line: 138]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 138]
!   !   !   Child: 1  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 138]
!   !   Sibling: 7  Op: + [type int] [line: 139]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 139]
!   !   !   Child: 1  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 139]
!   !   Sibling: 8  Op: * [type int] [line: 139]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 139]
!   !   !   Child: 1  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 139]
!   !   Sibling: 9  Op: / [type int] [line: 139]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 139]
!   !   !   Child: 1  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 139]
!   !   Sibling: 10  Op: % [type int] [line: 139]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 139]
!   !   !   Child: 1  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 139]
!   !   Sibling: 11  Op: + [type int] [line: 140]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 140]
!   !   !   Child: 1  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 140]
!   !   Sibling: 12  Op: * [type int] [line: 140]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 140]
!   !   !   Child: 1  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 140]
!   !   Sibling: 13  Op: / [type int] [line: 140]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 140]
!   !   !   Child: 1  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 140]
!   !   Sibling: 14  Op: % [type int] [line: 140]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 140]
!   !   !   Child: 1  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 140]
!   !   Sibling: 15  Op: < [type bool] [line: 142]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 142]
!   !   !   Child: 1  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 142]
!   !   Sibling: 16  Op: <= [type bool] [line: 142]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 142]
!   !   !   Child: 1  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 142]
!   !   Sibling: 17  Op: > [type bool] [line: 142]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 142]
!   !   !   Child: 1  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 142]
!   !   Sibling: 18  Op: >= [type bool] [line: 142]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 142]
!   !   !   Child: 1  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 142]
!   !   Sibling: 19  Op: < [type bool] [line: 143]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 143]
!   !   !   Child: 1  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 143]
!   !   Sibling: 20  Op: <= [type bool] [line: 143]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 143]
!   !   !   Child: 1  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 143]
!   !   Sibling: 21  Op: > [type bool] [line: 143]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 143]
!   !   !   Child: 1  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 143]
!   !   Sibling: 22  Op: >= [type bool] [line: 143]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 143]
!   !   !   Child: 1  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 143]
!   !   Sibling: 23  Op: < [type bool] [line: 144]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 144]
!   !   !   Child: 1  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 144]
!   !   Sibling: 24  Op: <= [type bool] [line: 144]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 144]
!   !   !   Child: 1  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 144]
!   !   Sibling: 25  Op: > [type bool] [line: 144]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 144]
!   !   !   Child: 1  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 144]
!   !   Sibling: 26  Op: >= [type bool] [line: 144]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 144]
!   !   !   Child: 1  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 144]
!   !   Sibling: 27  Op: < [type bool] [line: 145]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 145]
!   !   !   Child: 1  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 145]
!   !   Sibling: 28  Op: <= [type bool] [line: 145]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 145]
!   !   !   Child: 1  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 145]
!   !   Sibling: 29  Op: > [type bool] [line: 145]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 145]
!   !   !   Child: 1  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 145]
!   !   Sibling: 30  Op: >= [type bool] [line: 145]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 145]
!   !   !   Child: 1  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 145]
!   !   Sibling: 31  Assign: = [type int] [line: 147]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 147]
!   !   !   Child: 1  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 147]
!   !   Sibling: 32  Assign: = [type int] [line: 148]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 148]
!   !   !   Child: 1  Const: 2 [type int] [line: 148]
!   !   Sibling: 33  Assign: = [type int] [line: 149]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 149]
!   !   !   Child: 1  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 149]
!   !   Sibling: 34  Assign: = [type int] [line: 150]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 150]
!   !   !   Child: 1  Const: true [type bool] [line: 150]
!   !   Sibling: 35  Assign: = [type int] [line: 151]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 151]
!   !   !   Child: 1  Const: false [type bool] [line: 151]
!   !   Sibling: 36  Assign: = [type int] [line: 152]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 152]
!   !   !   Child: 1  Call: intfunc [type int] [line: 152]
!   !   Sibling: 37  Assign: = [type int] [line: 153]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 153]
!   !   !   Child: 1  Call: boolfunc [type bool] [line: 153]
!   !   Sibling: 38  Assign: = [type int] [line: 154]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 154]
!   !   !   Child: 1  Call: func [type void] [line: 154]
!   !   Sibling: 39  Assign: = [type bool] [line: 156]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 156]
!   !   !   Child: 1  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 156]
!   !   Sibling: 40  Assign: = [type bool] [line: 157]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 157]
!   !   !   Child: 1  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 157]
!   !   Sibling: 41  Assign: = [type bool] [line: 158]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 158]
!   !   !   Child: 1  Const: 2 [type int] [line: 158]
!   !   Sibling: 42  Assign: = [type bool] [line: 159]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 159]
!   !   !   Child: 1  Const: true [type bool] [line: 159]
!   !   Sibling: 43  Assign: = [type bool] [line: 160]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 160]
!   !   !   Child: 1  Const: false [type bool] [line: 160]
!   !   Sibling: 44  Assign: = [type bool] [line: 161]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 161]
!   !   !   Child: 1  Call: intfunc [type int] [line: 161]
!   !   Sibling: 45  Assign: = [type bool] [line: 162]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 162]
!   !   !   Child: 1  Call: boolfunc [type bool] [line: 162]
!   !   Sibling: 46  Assign: = [type bool] [line: 163]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 163]
!   !   !   Child: 1  Call: func [type void] [line: 163]
!   !   Sibling: 47  Op: not [type bool] [line: 165]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 165]
!   !   Sibling: 48  Op: not [type bool] [line: 166]
!   !   !   Child: 0  Const: true [type bool] [line: 166]
!   !   Sibling: 49  Op: not [type bool] [line: 167]
!   !   !   Child: 0  Const: false [type bool] [line: 167]
!   !   Sibling: 50  Op: not [type bool] [line: 168]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 168]
!   !   Sibling: 51  Op: not [type bool] [line: 169]
!   !   !   Child: 0  Const: 2 [type int] [line: 169]
!   !   Sibling: 52  Op: not [type bool] [line: 170]
!   !   !   Child: 0  Op: - [type int] [line: 170]
!   !   !   !   Child: 0  Const: 2 [type int] [line: 170]
!   !   Sibling: 53  Op: - [type int] [line: 171]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 171]
!   !   Sibling: 54  Op: - [type int] [line: 172]
!   !   !   Child: 0  Const: true [type bool] [line: 172]
!   !   Sibling: 55  Op: - [type int] [line: 173]
!   !   !   Child: 0  Const: false [type bool] [line: 173]
!   !   Sibling: 56  Op: - [type int] [line: 174]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 174]
!   !   Sibling: 57  Op: - [type int] [line: 175]
!   !   !   Child: 0  Const: 2 [type int] [line: 175]
!   !   Sibling: 58  Op: or [type bool] [line: 177]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 177]
!   !   !   Child: 1  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 177]
!   !   Sibling: 59  Op: or [type bool] [line: 178]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 178]
!   !   !   Child: 1  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 178]
!   !   Sibling: 60  Op: or [type bool] [line: 179]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 179]
!   !   !   Child: 1  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 179]
!   !   Sibling: 61  Op: or [type bool] [line: 180]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 180]
!   !   !   Child: 1  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 180]
!   !   Sibling: 62  Op: and [type bool] [line: 182]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 182]
!   !   !   Child: 1  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 182]
!   !   Sibling: 63  Op: and [type bool] [line: 183]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 183]
!   !   !   Child: 1  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 183]
!   !   Sibling: 64  Op: and [type bool] [line: 184]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 184]
!   !   !   Child: 1  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 184]
!   !   Sibling: 65  Op: and [type bool] [line: 185]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 185]
!   !   !   Child: 1  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 185]
Sibling: 32  Func t17 [ref: Global, size: -2, loc: 0] [type void] [line: 189]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 190]
!   !   Child: 1  If  [type void] [line: 191]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 191]
!   !   !   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 191]
!   !   Sibling: 0  If  [type void] [line: 192]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 192]
!   !   !   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 192]
!   !   Sibling: 1  If  [type void] [line: 193]
!   !   !   Child: 0  Call: boolfunc [type bool] [line: 193]
!   !   !   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 193]
!   !   Sibling: 2  If  [type void] [line: 194]
!   !   !   Child: 0  Call: intfunc [type int] [line: 194]
!   !   !   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 194]
!   !   Sibling: 3  If  [type void] [line: 195]
!   !   !   Child: 0  Call: func [type void] [line: 195]
!   !   !   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 195]
!   !   Sibling: 4  While  [type void] [line: 197]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 197]
!   !   !   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 197]
!   !   Sibling: 5  While  [type void] [line: 198]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 198]
!   !   !   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 198]
!   !   Sibling: 6  While  [type void] [line: 199]
!   !   !   Child: 0  Call: boolfunc [type bool] [line: 199]
!   !   !   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 199]
!   !   Sibling: 7  While  [type void] [line: 200]
!   !   !   Child: 0  Call: intfunc [type int] [line: 200]
!   !   !   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 200]
!   !   Sibling: 8  While  [type void] [line: 201]
!   !   !   Child: 0  Call: func [type void] [line: 201]
!   !   !   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 201]
Sibling: 33  Func t18 [ref: Global, size: -3, loc: 0] [type int] [line: 206]
!   Child: 0  Param a [ref: Param, size: 1, loc: -2] [type int] [line: 206]
!   Sibling: 0  Param a [ref: Param, size: 1, loc: 0] [type int] [line: 206]
!   Child: 1  Compound [ref: None, size: -3, loc: 0] [type void] [line: 207]
Sibling: 34  Func t19 [ref: Global, size: -2, loc: 0] [type int] [line: 210]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 211]
Sibling: 35  Func t19 [ref: Global, size: -2, loc: 0] [type int] [line: 214]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 215]
Sibling: 36  Var: a1 [ref: Global, size: 1, loc: -14] [type int] [line: 218]
Sibling: 37  Func t20 [ref: Global, size: -3, loc: 0] [type int] [line: 219]
!   Child: 0  Param a1 [ref: Param, size: 1, loc: -2] [type int] [line: 219]
!   Child: 1  Compound [ref: None, size: -3, loc: 0] [type void] [line: 220]
Sibling: 38  Var: a2 [ref: Global, size: 1, loc: -15] [type int] [line: 223]
Sibling: 39  Func t21 [ref: Global, size: -3, loc: 0] [type int] [line: 224]
!   Child: 0  Param a2 [ref: Param, size: 1, loc: -2] [type int] [line: 224]
!   Child: 1  Compound [ref: None, size: -3, loc: 0] [type void] [line: 225]
!   !   Child: 0  Var: a2 [ref: Local, size: 1, loc: 0] [type int] [line: 226]
Sibling: 40  Var: a3 [ref: Global, size: 1, loc: -16] [type int] [line: 229]
Sibling: 41  Func t22 [ref: Global, size: -4, loc: 0] [type int] [line: 230]
!   Child: 0  Param a3 [ref: Param, size: 1, loc: -2] [type int] [line: 230]
!   Child: 1  Compound [ref: None, size: -3, loc: 0] [type void] [line: 231]
!   !   Child: 1  Compound [ref: None, size: -4, loc: 0] [type void] [line: 232]
!   !   !   Child: 0  Var: a3 [ref: Local, size: 1, loc: -3] [type int] [line: 233]
Sibling: 42  Func t23 [ref: Global, size: -3, loc: 0] [type int] [line: 237]
!   Child: 1  Compound [ref: None, size: -3, loc: 0] [type void] [line: 238]
!   !   Child: 0  Var: a4 [ref: Local, size: 1, loc: -2] [type int] [line: 239]
!   !   Sibling: 0  Var: a4 [ref: Local, size: 1, loc: 0] [type int] [line: 240]
Sibling: 43  Func t24 [ref: Global, size: -4, loc: 0] [type int] [line: 243]
!   Child: 1  Compound [ref: None, size: -3, loc: 0] [type void] [line: 244]
!   !   Child: 0  Var: a4 [ref: Local, size: 1, loc: -2] [type int] [line: 245]
!   !   Child: 1  Compound [ref: None, size: -4, loc: 0] [type void] [line: 246]
!   !   !   Child: 0  Var: a4 [ref: Local, size: 1, loc: -3] [type int] [line: 247]
Sibling: 44  Var: a5 [ref: Global, size: 1, loc: -17] [type int] [line: 251]
Sibling: 45  Func t25 [ref: Global, size: -5, loc: 0] [type int] [line: 252]
!   Child: 0  Param a6 [ref: Param, size: 1, loc: -2] [type int] [line: 252]
!   Child: 1  Compound [ref: None, size: -4, loc: 0] [type void] [line: 253]
!   !   Child: 0  Var: a5 [ref: Local, size: 1, loc: -3] [type int] [line: 254]
!   !   Child: 1  Compound [ref: None, size: -5, loc: 0] [type void] [line: 255]
!   !   !   Child: 0  Var: a6 [ref: Local, size: 1, loc: -4] [type int] [line: 256]
Sibling: 46  Var: a7 [ref: Global, size: 1, loc: -18] [type int] [line: 260]
Sibling: 47  Var: a7 [ref: Local, size: 1, loc: 0] [type bool] [line: 261]
Sibling: 48  Var: a8 [ref: Global, size: 1, loc: -19] [type int] [line: 263]
Sibling: 49  Func a8 [ref: Global, size: -2, loc: 0] [type void] [line: 264]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 265]
Sibling: 50  Func a9 [ref: Global, size: -2, loc: 0] [type void] [line: 268]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 269]
Sibling: 51  Var: a9 [ref: Local, size: 1, loc: 0] [type int] [line: 271]
Sibling: 52  Func t26 [ref: Global, size: -2, loc: 0] [type void] [line: 274]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 275]
!   !   Child: 1  Call: zzz [undefined type] [line: 276]
Sibling: 53  Func t27 [ref: Global, size: -3, loc: 0] [type void] [line: 279]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 280]
!   !   Child: 1  Compound [ref: None, size: -3, loc: 0] [type void] [line: 281]
!   !   !   Child: 0  Var: x [ref: Local, size: 1, loc: -2] [type int] [line: 282]
!   !   Sibling: 0  Assign: = [undefined type] [line: 284]
!   !   !   Child: 0  Id: x [ref: None, size: 1, loc: 0] [undefined type] [line: 284]
!   !   !   Child: 1  Const: 1 [type int] [line: 284]
Sibling: 54  Var: x0 [ref: Global, size: 1, loc: -20] [type int] [line: 287]
Sibling: 55  Func t27 [ref: Global, size: -6, loc: 0] [type void] [line: 288]
!   Child: 0  Param x1 [ref: Param, size: 1, loc: -2] [type int] [line: 288]
!   Child: 1  Compound [ref: None, size: -4, loc: 0] [type void] [line: 289]
!   !   Child: 0  Var: x2 [ref: Local, size: 1, loc: -3] [type int] [line: 290]
!   !   Child: 1  Compound [ref: None, size: -5, loc: 0] [type void] [line: 291]
!   !   !   Child: 0  Var: x3 [ref: Local, size: 1, loc: -4] [type int] [line: 292]
!   !   !   Child: 1  Compound [ref: None, size: -6, loc: 0] [type void] [line: 293]
!   !   !   !   Child: 0  Var: x4 [ref: Local, size: 1, loc: -5] [type int] [line: 294]
!   !   !   !   Child: 1  Assign: = [type int] [line: 295]
!   !   !   !   !   Child: 0  Id: x0 [ref: Global, size: 1, loc: -20] [type int] [line: 295]
!   !   !   !   !   Child: 1  Const: 1 [type int] [line: 295]
!   !   !   !   Sibling: 0  Assign: = [type int] [line: 296]
!   !   !   !   !   Child: 0  Id: x1 [ref: Param, size: 1, loc: -2] [type int] [line: 296]
!   !   !   !   !   Child: 1  Const: 1 [type int] [line: 296]
!   !   !   !   Sibling: 1  Assign: = [type int] [line: 297]
!   !   !   !   !   Child: 0  Id: x2 [ref: Local, size: 1, loc: -3] [type int] [line: 297]
!   !   !   !   !   Child: 1  Const: 1 [type int] [line: 297]
!   !   !   !   Sibling: 2  Assign: = [type int] [line: 298]
!   !   !   !   !   Child: 0  Id: x3 [ref: Local, size: 1, loc: -4] [type int] [line: 298]
!   !   !   !   !   Child: 1  Const: 1 [type int] [line: 298]
!   !   !   !   Sibling: 3  Assign: = [type int] [line: 299]
!   !   !   !   !   Child: 0  Id: x4 [ref: Local, size: 1, loc: -5] [type int] [line: 299]
!   !   !   !   !   Child: 1  Const: 1 [type int] [line: 299]
!   !   !   Sibling: 0  Assign: = [type int] [line: 301]
!   !   !   !   Child: 0  Id: x0 [ref: Global, size: 1, loc: -20] [type int] [line: 301]
!   !   !   !   Child: 1  Const: 1 [type int] [line: 301]
!   !   !   Sibling: 1  Assign: = [type int] [line: 302]
!   !   !   !   Child: 0  Id: x1 [ref: Param, size: 1, loc: -2] [type int] [line: 302]
!   !   !   !   Child: 1  Const: 1 [type int] [line: 302]
!   !   !   Sibling: 2  Assign: = [type int] [line: 303]
!   !   !   !   Child: 0  Id: x2 [ref: Local, size: 1, loc: -3] [type int] [line: 303]
!   !   !   !   Child: 1  Const: 1 [type int] [line: 303]
!   !   !   Sibling: 3  Assign: = [type int] [line: 304]
!   !   !   !   Child: 0  Id: x3 [ref: Local, size: 1, loc: -4] [type int] [line: 304]
!   !   !   !   Child: 1  Const: 1 [type int] [line: 304]
!   !   !   Sibling: 4  Assign: = [undefined type] [line: 305]
!   !   !   !   Child: 0  Id: x4 [ref: None, size: 1, loc: 0] [undefined type] [line: 305]
!   !   !   !   Child: 1  Const: 1 [type int] [line: 305]
!   !   Sibling: 0  Assign: = [type int] [line: 307]
!   !   !   Child: 0  Id: x0 [ref: Global, size: 1, loc: -20] [type int] [line: 307]
!   !   !   Child: 1  Const: 1 [type int] [line: 307]
!   !   Sibling: 1  Assign: = [type int] [line: 308]
!   !   !   Child: 0  Id: x1 [ref: Param, size: 1, loc: -2] [type int] [line: 308]
!   !   !   Child: 1  Const: 1 [type int] [line: 308]
!   !   Sibling: 2  Assign: = [type int] [line: 309]
!   !   !   Child: 0  Id: x2 [ref: Local, size: 1, loc: -3] [type int] [line: 309]
!   !   !   Child: 1  Const: 1 [type int] [line: 309]
!   !   Sibling: 3  Assign: = [undefined type] [line: 310]
!   !   !   Child: 0  Id: x3 [ref: None, size: 1, loc: 0] [undefined type] [line: 310]
!   !   !   Child: 1  Const: 1 [type int] [line: 310]
!   !   Sibling: 4  Assign: = [undefined type] [line: 311]
!   !   !   Child: 0  Id: x4 [ref: None, size: 1, loc: 0] [undefined type] [line: 311]
!   !   !   Child: 1  Const: 1 [type int] [line: 311]
Sibling: 56  Func t28 [ref: Global, size: -4, loc: 0] [type void] [line: 314]
!   Child: 0  Param x1 [ref: Param, size: 1, loc: -2] [type int] [line: 314]
!   Child: 1  Compound [ref: None, size: -3, loc: 0] [type void] [line: 315]
!   !   Child: 1  Compound [ref: None, size: -4, loc: 0] [type void] [line: 316]
!   !   !   Child: 0  Var: x1 [ref: Local, size: 1, loc: -3] [type bool] [line: 317]
!   !   !   Child: 1  Assign: = [type bool] [line: 318]
!   !   !   !   Child: 0  Id: x1 [ref: Local, size: 1, loc: -3] [type bool] [line: 318]
!   !   !   !   Child: 1  Const: true [type bool] [line: 318]
Sibling: 57  Func t29 [ref: Global, size: -4, loc: 0] [type void] [line: 322]
!   Child: 0  Param x1 [ref: Param, size: 1, loc: -2] [type bool] [line: 322]
!   Child: 1  Compound [ref: None, size: -3, loc: 0] [type void] [line: 323]
!   !   Child: 1  Compound [ref: None, size: -4, loc: 0] [type void] [line: 324]
!   !   !   Child: 0  Var: x1 [ref: Local, size: 1, loc: -3] [type int] [line: 325]
!   !   !   Child: 1  Assign: = [type int] [line: 326]
!   !   !   !   Child: 0  Id: x1 [ref: Local, size: 1, loc: -3] [type int] [line: 326]
!   !   !   !   Child: 1  Const: true [type bool] [line: 326]
Sibling: 58  Func bar [ref: Global, size: -3, loc: 0] [type void] [line: 330]
!   Child: 1  Compound [ref: None, size: -3, loc: 0] [type void] [line: 331]
!   !   Child: 0  Var: bar [ref: Local, size: 1, loc: -2] [type int] [line: 332]
!   !   Child: 1  Assign: = [type int] [line: 333]
!   !   !   Child: 0  Id: bar [ref: Local, size: 1, loc: -2] [type int] [line: 333]
!   !   !   Child: 1  Const: 2 [type int] [line: 333]
Sibling: 59  Func bar2 [ref: Global, size: -2, loc: 0] [type void] [line: 336]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 337]
!   !   Child: 1  Call: bar2 [type void] [line: 338]
Sibling: 60  Func f1 [ref: Global, size: -2, loc: 0] [type void] [line: 341]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 342]
!   !   Child: 1  Call: f2 [undefined type] [line: 343]
Sibling: 61  Func f2 [ref: Global, size: -2, loc: 0] [type void] [line: 346]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 347]
!   !   Child: 1  Call: f1 [type void] [line: 348]
Sibling: 62  Func bar3 [ref: Global, size: -4, loc: 0] [type void] [line: 351]
!   Child: 0  Param x1 [ref: Param, size: 1, loc: -2] [type int] [line: 351]
!   Child: 1  Compound [ref: None, size: -3, loc: 0] [type void] [line: 352]
!   !   Child: 1  Compound [ref: None, size: -4, loc: 0] [type void] [line: 353]
!   !   !   Child: 0  Var: x1 [ref: Local, size: 1, loc: -3] [type bool] [line: 354]
!   !   !   Child: 1  Assign: = [type bool] [line: 355]
!   !   !   !   Child: 0  Id: x1 [ref: Local, size: 1, loc: -3] [type bool] [line: 355]
!   !   !   !   Child: 1  Const: false [type bool] [line: 355]
!   !   Sibling: 0  Assign: = [type int] [line: 357]
!   !   !   Child: 0  Id: x1 [ref: Param, size: 1, loc: -2] [type int] [line: 357]
!   !   !   Child: 1  Const: false [type bool] [line: 357]
Sibling: 63  Func bar4 [ref: Global, size: -2, loc: 0] [type void] [line: 362]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 363]
Sibling: 64  Func bar5 [ref: Global, size: -3, loc: 0] [type void] [line: 366]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 367]
!   !   Child: 1  Compound [ref: None, size: -3, loc: 0] [type void] [line: 368]
!   !   !   Child: 0  Var: bar4 [ref: Local, size: 1, loc: -2] [type int] [line: 369]
!   !   !   Child: 1  Assign: = [type int] [line: 370]
!   !   !   !   Child: 0  Id: bar4 [ref: Local, size: 1, loc: -2] [type int] [line: 370]
!   !   !   !   Child: 1  Const: 1 [type int] [line: 370]
!   !   !   Sibling: 0  Call: bar4 [type int] [line: 371]
!   !   Sibling: 0  Assign: = [undefined type] [line: 373]
!   !   !   Child: 0  Id: bar4 [ref: Global, size: -2, loc: 0] [undefined type] [line: 373]
!   !   !   Child: 1  Const: 1 [type int] [line: 373]
!   !   Sibling: 1  Call: bar4 [type void] [line: 374]
Sibling: 65  Func t30 [ref: Global, size: -15, loc: 0] [type void] [line: 377]
!   Child: 1  Compound [ref: None, size: -15, loc: 0] [type void] [line: 378]
!   !   Child: 0  Var: x [ref: Local, size: 1, loc: -2] [type int] [line: 379]
!   !   Sibling: 0  Var: y [ref: Local, size: 1, loc: -3] [type int] [line: 380]
!   !   Sibling: 1  Var: z is array [ref: Local, size: 11, loc: -5] [type int] [line: 381]
!   !   Child: 1  Assign: = [type int] [line: 382]
!   !   !   Child: 0  Id: x [ref: Local, size: 1, loc: -2] [type int] [line: 382]
!   !   !   Child: 1  Op: [ [type int] [line: 382]
!   !   !   !   Child: 0  Id: y [ref: Local, size: 1, loc: -3] [type int] [line: 382]
!   !   !   !   Child: 1  Const: 10 [type int] [line: 382]
!   !   Sibling: 0  Assign: = [type int] [line: 383]
!   !   !   Child: 0  Id: x [ref: Local, size: 1, loc: -2] [type int] [line: 383]
!   !   !   Child: 1  Op: [ [type int] [line: 383]
!   !   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 383]
!   !   !   !   Child: 1  Const: 10 [type int] [line: 383]
!   !   Sibling: 1  Assign: = [type int] [line: 384]
!   !   !   Child: 0  Id: x [ref: Local, size: 1, loc: -2] [type int] [line: 384]
!   !   !   Child: 1  Op: [ [type bool] [line: 384]
!   !   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 384]
!   !   !   !   Child: 1  Const: 10 [type int] [line: 384]
!   !   Sibling: 2  Assign: = [type int] [line: 385]
!   !   !   Child: 0  Id: x [ref: Local, size: 1, loc: -2] [type int] [line: 385]
!   !   !   Child: 1  Op: [ [undefined type] [line: 385]
!   !   !   !   Child: 0  Id: bar4 [ref: Global, size: -2, loc: 0] [undefined type] [line: 385]
!   !   !   !   Child: 1  Const: 10 [type int] [line: 385]
!   !   Sibling: 3  Assign: = [type int] [line: 386]
!   !   !   Child: 0  Id: x [ref: Local, size: 1, loc: -2] [type int] [line: 386]
!   !   !   Child: 1  Id: z is array [ref: Local, size: 11, loc: -5] [type int] [line: 386]
!   !   Sibling: 4  Assign: = [type int] [line: 387]
!   !   !   Child: 0  Id: x [ref: Local, size: 1, loc: -2] [type int] [line: 387]
!   !   !   Child: 1  Op: [ [type int] [line: 387]
!   !   !   !   Child: 0  Id: z is array [ref: Local, size: 11, loc: -5] [type int] [line: 387]
!   !   !   !   Child: 1  Id: x [ref: Local, size: 1, loc: -2] [type int] [line: 387]
!   !   Sibling: 5  Assign: = [type int] [line: 388]
!   !   !   Child: 0  Op: [ [type int] [line: 388]
!   !   !   !   Child: 0  Id: z is array [ref: Local, size: 11, loc: -5] [type int] [line: 388]
!   !   !   !   Child: 1  Id: x [ref: Local, size: 1, loc: -2] [type int] [line: 388]
!   !   !   Child: 1  Id: x [ref: Local, size: 1, loc: -2] [type int] [line: 388]
!   !   Sibling: 6  Assign: = [type int] [line: 389]
!   !   !   Child: 0  Op: [ [type int] [line: 389]
!   !   !   !   Child: 0  Id: z is array [ref: Local, size: 11, loc: -5] [type int] [line: 389]
!   !   !   !   Child: 1  Const: 1 [type int] [line: 389]
!   !   !   Child: 1  Op: [ [type int] [line: 389]
!   !   !   !   Child: 0  Id: z is array [ref: Local, size: 11, loc: -5] [type int] [line: 389]
!   !   !   !   Child: 1  Const: 2 [type int] [line: 389]
!   !   Sibling: 7  Assign: = [type int] [line: 390]
!   !   !   Child: 0  Op: [ [type int] [line: 390]
!   !   !   !   Child: 0  Id: z is array [ref: Local, size: 11, loc: -5] [type int] [line: 390]
!   !   !   !   Child: 1  Op: [ [type int] [line: 390]
!   !   !   !   !   Child: 0  Id: z is array [ref: Local, size: 11, loc: -5] [type int] [line: 390]
!   !   !   !   !   Child: 1  Const: 1 [type int] [line: 390]
!   !   !   Child: 1  Op: [ [type int] [line: 390]
!   !   !   !   Child: 0  Id: z is array [ref: Local, size: 11, loc: -5] [type int] [line: 390]
!   !   !   !   Child: 1  Op: [ [type int] [line: 390]
!   !   !   !   !   Child: 0  Id: z is array [ref: Local, size: 11, loc: -5] [type int] [line: 390]
!   !   !   !   !   Child: 1  Op: [ [type int] [line: 390]
!   !   !   !   !   !   Child: 0  Id: z is array [ref: Local, size: 11, loc: -5] [type int] [line: 390]
!   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 390]
!   !   Sibling: 8  Op: not [type bool] [line: 391]
!   !   !   Child: 0  Id: z is array [ref: Local, size: 11, loc: -5] [type int] [line: 391]
!   !   Sibling: 9  Op: not [type bool] [line: 392]
!   !   !   Child: 0  Op: [ [type int] [line: 392]
!   !   !   !   Child: 0  Id: z is array [ref: Local, size: 11, loc: -5] [type int] [line: 392]
!   !   !   !   Child: 1  Const: 1 [type int] [line: 392]
!   !   Sibling: 10  Op: - [type int] [line: 393]
!   !   !   Child: 0  Op: [ [type int] [line: 393]
!   !   !   !   Child: 0  Id: z is array [ref: Local, size: 11, loc: -5] [type int] [line: 393]
!   !   !   !   Child: 1  Const: 1 [type int] [line: 393]
!   !   Sibling: 11  Assign: = [type int] [line: 394]
!   !   !   Child: 0  Id: x [ref: Local, size: 1, loc: -2] [type int] [line: 394]
!   !   !   Child: 1  Op: [ [type int] [line: 394]
!   !   !   !   Child: 0  Id: z is array [ref: Local, size: 11, loc: -5] [type int] [line: 394]
!   !   !   !   Child: 1  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 394]
!   !   Sibling: 12  Assign: = [type int] [line: 395]
!   !   !   Child: 0  Id: x [ref: Local, size: 1, loc: -2] [type int] [line: 395]
!   !   !   Child: 1  Op: [ [type int] [line: 395]
!   !   !   !   Child: 0  Id: z is array [ref: Local, size: 11, loc: -5] [type int] [line: 395]
!   !   !   !   Child: 1  Call: bar4 [type void] [line: 395]
!   !   Sibling: 13  Assign: = [type int] [line: 396]
!   !   !   Child: 0  Id: x [ref: Local, size: 1, loc: -2] [type int] [line: 396]
!   !   !   Child: 1  Op: [ [type int] [line: 396]
!   !   !   !   Child: 0  Id: z is array [ref: Local, size: 11, loc: -5] [type int] [line: 396]
!   !   !   !   Child: 1  Id: z is array [ref: Local, size: 11, loc: -5] [type int] [line: 396]
!   !   Sibling: 14  Assign: = [type int] [line: 397]
!   !   !   Child: 0  Id: x [ref: Local, size: 1, loc: -2] [type int] [line: 397]
!   !   !   Child: 1  Op: [ [type int] [line: 397]
!   !   !   !   Child: 0  Id: z is array [ref: Local, size: 11, loc: -5] [type int] [line: 397]
!   !   !   !   Child: 1  Id: arr is array [ref: Global, size: 11, loc: -4] [type int] [line: 397]
!   !   Sibling: 15  Assign: = [type int] [line: 398]
!   !   !   Child: 0  Id: x [ref: Local, size: 1, loc: -2] [type int] [line: 398]
!   !   !   Child: 1  Op: [ [type int] [line: 398]
!   !   !   !   Child: 0  Id: z is array [ref: Local, size: 11, loc: -5] [type int] [line: 398]
!   !   !   !   Child: 1  Id: intfunc [ref: Global, size: -2, loc: 0] [undefined type] [line: 398]
!   !   Sibling: 16  Assign: = [type int] [line: 399]
!   !   !   Child: 0  Id: x [ref: Local, size: 1, loc: -2] [type int] [line: 399]
!   !   !   Child: 1  Op: [ [type int] [line: 399]
!   !   !   !   Child: 0  Id: z is array [ref: Local, size: 11, loc: -5] [type int] [line: 399]
!   !   !   !   Child: 1  Call: intfunc [type int] [line: 399]
!   !   Sibling: 17  Assign: = [type int] [line: 400]
!   !   !   Child: 0  Id: x [ref: Local, size: 1, loc: -2] [type int] [line: 400]
!   !   !   Child: 1  Op: [ [type int] [line: 400]
!   !   !   !   Child: 0  Id: z is array [ref: Local, size: 11, loc: -5] [type int] [line: 400]
!   !   !   !   Child: 1  Id: x0 [ref: Global, size: 1, loc: -20] [type int] [line: 400]
Sibling: 66  Func t31 [ref: Global, size: -3, loc: 0] [type int] [line: 403]
!   Child: 0  Param x [ref: Param, size: 1, loc: -2] [type int] [line: 403]
!   Child: 1  Compound [ref: None, size: -3, loc: 0] [type void] [line: 404]
!   !   Child: 1  Id: y [ref: None, size: 1, loc: 0] [undefined type] [line: 405]
!   !   Sibling: 0  Assign: = [type bool] [line: 406]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 406]
!   !   !   Child: 1  Id: x [ref: Param, size: 1, loc: -2] [type int] [line: 406]
!   !   Sibling: 1  Assign: = [type bool] [line: 407]
!   !   !   Child: 0  Id: b [ref: Global, size: 1, loc: 0] [type bool] [line: 407]
!   !   !   Child: 1  Id: y [ref: None, size: 1, loc: 0] [undefined type] [line: 407]
Sibling: 67  Var: z1 [ref: Global, size: 1, loc: -21] [type int] [line: 411]
Sibling: 68  Func t32 [ref: Global, size: -2, loc: 0] [type void] [line: 412]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 413]
!   !   Child: 1  Id: z1 [ref: Global, size: 1, loc: -21] [type int] [line: 414]
!   !   Sibling: 0  Assign: = [type int] [line: 415]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 415]
!   !   !   Child: 1  Id: z1 [ref: Global, size: 1, loc: -21] [type int] [line: 415]
Sibling: 69  Func t33 [ref: Global, size: -3, loc: 0] [type void] [line: 419]
!   Child: 1  Compound [ref: None, size: -3, loc: 0] [type void] [line: 420]
!   !   Child: 0  Var: z2 [ref: Local, size: 1, loc: -2] [type int] [line: 421]
!   !   Child: 1  Id: z2 [ref: Local, size: 1, loc: -2] [type int] [line: 422]
!   !   Sibling: 0  Assign: = [type int] [line: 423]
!   !   !   Child: 0  Id: i [ref: Global, size: 1, loc: -1] [type int] [line: 423]
!   !   !   Child: 1  Id: z2 [ref: Local, size: 1, loc: -2] [type int] [line: 423]
Offset for end of global space: -22
Number of warnings: 13
Number of errors: 127
