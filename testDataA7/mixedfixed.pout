Func input [ref: Global, size: -2, loc: 0] [type int] [line: -1]
Sibling: 0  Func output [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy* [ref: Param, size: 1, loc: -2] [type int] [line: -1]
Sibling: 1  Func inputb [ref: Global, size: -2, loc: 0] [type bool] [line: -1]
Sibling: 2  Func outputb [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy* [ref: Param, size: 1, loc: -2] [type bool] [line: -1]
Sibling: 3  Func inputc [ref: Global, size: -2, loc: 0] [type char] [line: -1]
Sibling: 4  Func outputc [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy* [ref: Param, size: 1, loc: -2] [type char] [line: -1]
Sibling: 5  Func outnl [ref: Global, size: -2, loc: 0] [type void] [line: -1]
Sibling: 6  Var: a [ref: Global, size: 1, loc: 0] [type int] [line: 2]
!   Child: 0  Const: 1 [type int] [line: 2]
Sibling: 7  Var: b is array [ref: Global, size: 5, loc: -2] [type int] [line: 2]
Sibling: 8  Var: c [ref: Global, size: 1, loc: -6] [type int] [line: 2]
!   Child: 0  Const: 3 [type int] [line: 2]
Sibling: 9  Func main [ref: Global, size: -2, loc: 0] [type void] [line: 3]
!   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 3]
!   !   Child: 1  While  [type void] [line: 4]
!   !   !   Child: 0  Const: true [type bool] [line: 4]
!   !   !   Child: 1  If  [type void] [line: 5]
!   !   !   !   Child: 0  Const: false [type bool] [line: 5]
!   !   !   !   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 6]
!   !   !   !   !   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 6]
!   !   !   !   !   !   Child: 1  Compound [ref: None, size: -2, loc: 0] [type void] [line: 6]
!   !   !   !   !   !   !   Child: 1  Op: [ [type int] [line: 6]
!   !   !   !   !   !   !   !   Child: 0  Id: b is array [ref: Global, size: 5, loc: -2] [type int] [line: 6]
!   !   !   !   !   !   !   !   Child: 1  Op: * [type int] [line: 6]
!   !   !   !   !   !   !   !   !   Child: 0  Const: 2 [type int] [line: 6]
!   !   !   !   !   !   !   !   !   Child: 1  Id: a [ref: Global, size: 1, loc: 0] [type int] [line: 6]
!   !   !   !   Child: 2  Break [type void] [line: 7]
!   !   Sibling: 0  If  [type void] [line: 8]
!   !   !   Child: 0  Const: true [type bool] [line: 8]
Sibling: 10  Var: gromit is array [ref: Global, size: 11, loc: -8] [type int] [line: 12]
Sibling: 11  Func thelma [ref: Global, size: -6, loc: 0] [type int] [line: 13]
!   Child: 0  Param a [ref: Param, size: 1, loc: -2] [type int] [line: 13]
!   Sibling: 0  Param b is array [ref: Param, size: 1, loc: -3] [type int] [line: 13]
!   Sibling: 1  Param c [ref: Param, size: 1, loc: -4] [type bool] [line: 13]
!   Child: 1  Compound [ref: None, size: -6, loc: 0] [type void] [line: 14]
!   !   Child: 0  Var: zz [ref: Local, size: 1, loc: -5] [type int] [line: 15]
!   !   !   Child: 0  Const: 666 [type int] [line: 15]
!   !   Child: 1  Assign: = [type int] [line: 17]
!   !   !   Child: 0  Id: a [ref: Param, size: 1, loc: -2] [type int] [line: 17]
!   !   !   Child: 1  Op: * [type int] [line: 17]
!   !   !   !   Child: 0  Call: thelma [type int] [line: 17]
!   !   !   !   !   Child: 0  Id: a [ref: Param, size: 1, loc: -2] [type int] [line: 17]
!   !   !   !   !   Sibling: 0  Id: b is array [ref: Param, size: 1, loc: -3] [type int] [line: 17]
!   !   !   !   !   Sibling: 1  Const: true [type bool] [line: 17]
!   !   !   !   Child: 1  Const: 2 [type int] [line: 17]
!   !   Sibling: 0  If  [type void] [line: 18]
!   !   !   Child: 0  Op: > [type bool] [line: 18]
!   !   !   !   Child: 0  Id: a [ref: Param, size: 1, loc: -2] [type int] [line: 18]
!   !   !   !   Child: 1  Const: 3 [type int] [line: 18]
!   !   !   Child: 1  Compound [ref: None, size: -6, loc: 0] [type void] [line: 18]
!   !   !   !   Child: 1  Assign: = [type int] [line: 19]
!   !   !   !   !   Child: 0  Id: a [ref: Param, size: 1, loc: -2] [type int] [line: 19]
!   !   !   !   !   Child: 1  Op: [ [type int] [line: 19]
!   !   !   !   !   !   Child: 0  Id: gromit is array [ref: Global, size: 11, loc: -8] [type int] [line: 19]
!   !   !   !   !   !   Child: 1  Const: 7 [type int] [line: 19]
!   !   !   Child: 2  Return [type void] [line: 21]
!   !   !   !   Child: 0  Id: zz [ref: Local, size: 1, loc: -5] [type int] [line: 21]
Sibling: 12  Func thelma2 [ref: Global, size: -6, loc: 0] [type int] [line: 24]
!   Child: 0  Param a [ref: Param, size: 1, loc: -2] [type int] [line: 24]
!   Sibling: 0  Param b [ref: Param, size: 1, loc: -3] [type int] [line: 24]
!   Sibling: 1  Param c [ref: Param, size: 1, loc: -4] [type bool] [line: 24]
!   Child: 1  Compound [ref: None, size: -6, loc: 0] [type void] [line: 25]
!   !   Child: 0  Var: zz [ref: Local, size: 1, loc: -5] [type int] [line: 26]
!   !   !   Child: 0  Const: 666 [type int] [line: 26]
!   !   Child: 1  Return [type void] [line: 28]
!   !   !   Child: 0  Assign: = [type int] [line: 28]
!   !   !   !   Child: 0  Id: a [ref: Param, size: 1, loc: -2] [type int] [line: 28]
!   !   !   !   Child: 1  Op: * [type int] [line: 28]
!   !   !   !   !   Child: 0  Call: thelma2 [type int] [line: 28]
!   !   !   !   !   !   Child: 0  Id: a [ref: Param, size: 1, loc: -2] [type int] [line: 28]
!   !   !   !   !   !   Sibling: 0  Id: b [ref: Param, size: 1, loc: -3] [type int] [line: 28]
!   !   !   !   !   !   Sibling: 1  Const: true [type bool] [line: 28]
!   !   !   !   !   Child: 1  Const: 2 [type int] [line: 28]
Offset for end of global space: -18
Number of warnings: 0
Number of errors: 0
